{
	"info": {
		"_postman_id": "75b1aeb6-97c8-4581-84d9-c27b9e0a298e",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30928254"
	},
	"item": [
		{
			"name": "Scenario 1: End-to-end (ML) Copy",
			"item": [
				{
					"name": "Создание эксперимента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Эксперименты\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"         pm.response.to.have.status(201)\r",
									"     });\r",
									"\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #ef85ffa4;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#ef85ffa4;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление эксперимента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Эксперименты\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"guid\": \"{{experimentGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание модели в эксперименте",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Модели\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"test_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"prod_version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание шага \"Препроцессинг\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"preprocessingGuid\", jsonData.guid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"schema\": \"{{schema}}\",\r\n    \"object_datasource\": \"{{objectDatasource}}\",\r\n    \"source_step\": null,\r\n    \"columns\": [\r\n        {\r\n            \"column_name\": \"attrition\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": true,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"age\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"gender\",\r\n            \"column_type\": \"categorical\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"dailyrate\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        }\r\n    ],\r\n    \"preprocessors\": [\r\n        {\r\n            \"preprocessor\": \"scale_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"age\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"ohe_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"gender\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"minmaxnorm_processing\",\r\n            \"params\": {\r\n                \"feature_range\": [\r\n                    0,\r\n                    1\r\n                ]\r\n            },\r\n            \"column_name\": \"dailyrate\"\r\n        }\r\n    ],\r\n    \"strict_order\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/service-ml-middleware/api/steps/preprocessing",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"preprocessing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание шага \"Параметры модели\" с классическим алгоритмом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PARAMETERS\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"parametersGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"name\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"learning_task_type\": \"classification\",\r\n    \"algorithm_type\": \"classic\",\r\n    \"classic_ml_algorithm\": \"random_forest_classifier\",\r\n    \"neuro_dl_algorithm\": null,\r\n    \"algorithm_params\": {\r\n        \"criterion\": \"gini\",\r\n        \"max_depth\": 55,\r\n        \"class_weight\": \"balanced\",\r\n        \"max_features\": 1.0,\r\n        \"n_estimators\": 300,\r\n        \"min_samples_leaf\": 4,\r\n        \"min_samples_split\": 4\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/parameters",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание шага \"Тренировка\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"TRAINING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"trainingGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"metrics\": [\r\n        \"accuracy\",\r\n        \"precision\",\r\n        \"recall\",\r\n        \"f1\",\r\n        \"roc_auc\",\r\n        \"confusion_matrix\",\r\n        \"roc\"\r\n    ],\r\n    \"loss\": null,\r\n    \"optimizer\": null,\r\n    \"scheduler\": null,\r\n    \"val_size\": 0.2,\r\n    \"learning_rate\": null,\r\n    \"n_epochs\": null,\r\n    \"train_batch_size\": null,\r\n    \"val_batch_size\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/training",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"training"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание связи 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=ML\r",
									"// @allure.label.story=Связи\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{preprocessingGuid}}\",\r\n  \"type_first_step\": \"PREPROCESSING\",\r\n  \"second_step_id\": \"{{parametersGuid}}\",\r\n  \"type_second_step\": \"PARAMETERS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание связи 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{parametersGuid}}\",\r\n  \"type_first_step\": \"PARAMETERS\",\r\n  \"second_step_id\": \"{{trainingGuid}}\",\r\n  \"type_second_step\": \"TRAINING\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение идентификатора запуска",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"run_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"runGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/runs",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск препроцессинга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"running\")\r",
									"});\r",
									"\r",
									"console.log(\"Запуск препроцессинга\")\r",
									"\r",
									"// Установка задержки на 30 секунд (30000 миллисекунд)\r",
									"setTimeout(function() {\r",
									"}, 30000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/preprocessing/{{preprocessingGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"preprocessing",
								"{{preprocessingGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск тренировки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"console.log(\"Запуск тренировки\")\r",
									"\r",
									"// Установка задержки на 60 секунд (60000 миллисекунд)\r",
									"setTimeout(function() {\r",
									"}, 60000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}/training?description=Описание запуска тест",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}",
								"training"
							],
							"query": [
								{
									"key": "description",
									"value": "Описание запуска тест"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка создания таблицы результатов препроцессинга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// Смещение в минутах относительно UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// Получаем час в выбранной таймзоне\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана обработанная таблица\r",
									"pm.test(\"Таблица результатов препроцессинга создана\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка сохранения метрик",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"// Проверяем, что для созданной модели записались метрики качества\r",
									"pm.test(\"Метрики модели сохранены\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.data;\r",
									"    \r",
									"    pm.expect(data).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"select * from training_results where model_id='{{modelGuid}}'\",\r\n    \"data_source\": {\r\n        \"url\": \"bi-tst-01:5447\",\r\n        \"principal\": \"postgres\",\r\n        \"credential\": \"postgres\",\r\n        \"auth_type\": \"PASSWORD\",\r\n        \"db_type\": \"POSTGRES\"\r\n    },\r\n    \"db_name\": \"ml_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/connector-postgresql/v3/data-sources/get-data-set",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"connector-postgresql",
								"v3",
								"data-sources",
								"get-data-set"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение идентификатора версии",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"state\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"versionGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/versions",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение состояния версии - Тестирование",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=TEST",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "TEST"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск на тестирование (оценка) версии",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"version\": \"{{versionGuid}}\",\r\n    \"source_schema\": \"{{schema}}\",\r\n    \"source_object\": \"{{objectDatasource}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/testing",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"testing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение состояния версии - Продакшн",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=PRODUCTION",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "PRODUCTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск на получение предсказаний версии",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"version\": \"{{versionGuid}}\",\r\n    \"source_schema\": \"{{schema}}\",\r\n    \"source_object\": \"{{objectDatasourcePredict}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/prediction",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"prediction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение состояния версии - Архив",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=ARCHIVE",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ARCHIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка создания таблицы результатов тестирования",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"test\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"testingDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"console.log(testingDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(testingDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана таблица с результатами тестирования\r",
									"pm.test(\"Таблица результатов тестирования создана\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка создания таблицы результатов предсказаний",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"pred\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"predictionDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"console.log(predictionDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(predictionDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана таблица с результатами предсказаний\r",
									"pm.test(\"Таблица результатов предсказаний создана\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление запуска",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление модели",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Модели\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление эксперимента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Эксперименты\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments/{{experimentGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments",
								"{{experimentGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка удаления таблицы результатов препроцессинга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// Смещение в минутах относительно UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// Получаем час в выбранной таймзоне\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана обработанная таблица\r",
									"pm.test(\"Таблица результатов препроцессинга удалена\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка удаления таблицы результатов предсказаний",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"prediction\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"// console.log(preprocessedDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана таблица с результатами предсказаний\r",
									"pm.test(\"Таблица результатов предсказаний удалена\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка удаления таблицы результатов тестирования",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"testing\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"// console.log(preprocessedDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана таблица с результатами тестирования\r",
									"pm.test(\"Таблица результатов тестирования удалена\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка удаления метрик",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"// Проверяем, что для созданной модели метрики качества были удалены\r",
									"pm.test(\"Метрики модели удалены\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.data;\r",
									"    \r",
									"// Проверка на пустоту объекта \"data\"\r",
									"    pm.expect(data).to.eql([]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"select * from training_results where model_id='{{modelGuid}}'\",\r\n    \"data_source\": {\r\n        \"url\": \"bi-dev-01:5447\",\r\n        \"principal\": \"postgres\",\r\n        \"credential\": \"postgres\",\r\n        \"auth_type\": \"PASSWORD\",\r\n        \"db_type\": \"POSTGRES\"\r\n    },\r\n    \"db_name\": \"ml_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/connector-postgresql/v3/data-sources/get-data-set",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"connector-postgresql",
								"v3",
								"data-sources",
								"get-data-set"
							]
						}
					},
					"response": []
				}
			],
			"description": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with ML algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment"
		},
		{
			"name": "Scenario 2: End-to-end (DL) Copy",
			"item": [
				{
					"name": "Создание эксперимента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Эксперименты\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"         pm.response.to.have.status(201)\r",
									"     });\r",
									"\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #ef85ffa4;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#ef85ffa4;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление эксперимента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Эксперименты\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"guid\": \"{{experimentGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание модели в эксперименте",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Модели\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"test_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"prod_version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание шага \"Препроцессинг\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"preprocessingGuid\", jsonData.guid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"schema\": \"{{schema}}\",\r\n    \"object_datasource\": \"{{objectDatasource}}\",\r\n    \"source_step\": null,\r\n    \"columns\": [\r\n        {\r\n            \"column_name\": \"attrition\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": true,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"age\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"gender\",\r\n            \"column_type\": \"categorical\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"dailyrate\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        }\r\n    ],\r\n    \"preprocessors\": [\r\n        {\r\n            \"preprocessor\": \"scale_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"age\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"ohe_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"gender\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"minmaxnorm_processing\",\r\n            \"params\": {\r\n                \"feature_range\": [\r\n                    0,\r\n                    1\r\n                ]\r\n            },\r\n            \"column_name\": \"dailyrate\"\r\n        }\r\n    ],\r\n    \"strict_order\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/service-ml-middleware/api/steps/preprocessing",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"preprocessing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание шага \"Параметры модели\" с нейросетевым алгоритмом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PARAMETERS\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"parametersGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"name\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"learning_task_type\": \"classification\",\r\n    \"algorithm_type\": \"neuro\",\r\n    \"classic_ml_algorithm\": null,\r\n    \"neuro_dl_algorithm\": \"mlp\",\r\n    \"algorithm_params\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/parameters",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание шага \"Тренировка\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"TRAINING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"trainingGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"metrics\": [\r\n        \"accuracy\",\r\n        \"precision\",\r\n        \"recall\",\r\n        \"f1\",\r\n        \"roc_auc\",\r\n        \"confusion_matrix\",\r\n        \"roc\"\r\n    ],\r\n    \"loss\": null,\r\n    \"optimizer\": null,\r\n    \"scheduler\": null,\r\n    \"val_size\": 0.2,\r\n    \"learning_rate\": null,\r\n    \"n_epochs\": null,\r\n    \"train_batch_size\": null,\r\n    \"val_batch_size\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/training",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"training"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание связи 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=ML\r",
									"// @allure.label.story=Связи\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{preprocessingGuid}}\",\r\n  \"type_first_step\": \"PREPROCESSING\",\r\n  \"second_step_id\": \"{{parametersGuid}}\",\r\n  \"type_second_step\": \"PARAMETERS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание связи 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{parametersGuid}}\",\r\n  \"type_first_step\": \"PARAMETERS\",\r\n  \"second_step_id\": \"{{trainingGuid}}\",\r\n  \"type_second_step\": \"TRAINING\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение идентификатора запуска",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"run_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"runGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/runs",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск препроцессинга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"running\")\r",
									"});\r",
									"\r",
									"console.log(\"Запуск препроцессинга\")\r",
									"\r",
									"// Установка задержки на 30 секунд (30000 миллисекунд)\r",
									"setTimeout(function() {\r",
									"}, 30000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/preprocessing/{{preprocessingGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"preprocessing",
								"{{preprocessingGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск тренировки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"console.log(\"Запуск тренировки\")\r",
									"\r",
									"// Установка задержки на 60 секунд (60000 миллисекунд)\r",
									"setTimeout(function() {\r",
									"}, 60000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}/training?description=Описание запуска тест",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}",
								"training"
							],
							"query": [
								{
									"key": "description",
									"value": "Описание запуска тест"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка создания таблицы результатов препроцессинга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// Смещение в минутах относительно UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// Получаем час в выбранной таймзоне\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана обработанная таблица\r",
									"pm.test(\"Таблица результатов препроцессинга создана\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка сохранения метрик",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"// Проверяем, что для созданной модели записались метрики качества\r",
									"pm.test(\"Метрики модели сохранены\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.data;\r",
									"    \r",
									"    pm.expect(data).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"select * from training_results where model_id='{{modelGuid}}'\",\r\n    \"data_source\": {\r\n        \"url\": \"bi-tst-01:5447\",\r\n        \"principal\": \"postgres\",\r\n        \"credential\": \"postgres\",\r\n        \"auth_type\": \"PASSWORD\",\r\n        \"db_type\": \"POSTGRES\"\r\n    },\r\n    \"db_name\": \"ml_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/connector-postgresql/v3/data-sources/get-data-set",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"connector-postgresql",
								"v3",
								"data-sources",
								"get-data-set"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение идентификатора версии",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"state\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"versionGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/versions",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение состояния версии - Тестирование",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=TEST",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "TEST"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск на тестирование (оценка) версии",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"version\": \"{{versionGuid}}\",\r\n    \"source_schema\": \"{{schema}}\",\r\n    \"source_object\": \"{{objectDatasource}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/testing",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"testing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение состояния версии - Продакшн",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=PRODUCTION",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "PRODUCTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск на получение предсказаний версии",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"version\": \"{{versionGuid}}\",\r\n    \"source_schema\": \"{{schema}}\",\r\n    \"source_object\": \"{{objectDatasourcePredict}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/prediction",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"prediction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение состояния версии - Архив",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=ARCHIVE",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ARCHIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка создания таблицы результатов тестирования",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"test\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"testingDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"console.log(testingDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(testingDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана таблица с результатами тестирования\r",
									"pm.test(\"Таблица результатов тестирования создана\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка создания таблицы результатов предсказаний",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"pred\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"predictionDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"console.log(predictionDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(predictionDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана таблица с результатами предсказаний\r",
									"pm.test(\"Таблица результатов предсказаний создана\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление запуска",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление модели",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Модели\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление эксперимента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Эксперименты\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments/{{experimentGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments",
								"{{experimentGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка удаления таблицы результатов препроцессинга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// Смещение в минутах относительно UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// Получаем час в выбранной таймзоне\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана обработанная таблица\r",
									"pm.test(\"Таблица результатов препроцессинга удалена\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка удаления таблицы результатов предсказаний",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"prediction\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"// console.log(preprocessedDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана таблица с результатами предсказаний\r",
									"pm.test(\"Таблица результатов предсказаний удалена\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка удаления таблицы результатов тестирования",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"testing\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"// console.log(preprocessedDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана таблица с результатами тестирования\r",
									"pm.test(\"Таблица результатов тестирования удалена\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка удаления метрик",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"// Проверяем, что для созданной модели метрики качества были удалены\r",
									"pm.test(\"Метрики модели удалены\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.data;\r",
									"    \r",
									"// Проверка на пустоту объекта \"data\"\r",
									"    pm.expect(data).to.eql([]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"select * from training_results where model_id='{{modelGuid}}'\",\r\n    \"data_source\": {\r\n        \"url\": \"bi-dev-01:5447\",\r\n        \"principal\": \"postgres\",\r\n        \"credential\": \"postgres\",\r\n        \"auth_type\": \"PASSWORD\",\r\n        \"db_type\": \"POSTGRES\"\r\n    },\r\n    \"db_name\": \"ml_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/connector-postgresql/v3/data-sources/get-data-set",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"connector-postgresql",
								"v3",
								"data-sources",
								"get-data-set"
							]
						}
					},
					"response": []
				}
			],
			"description": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment"
		},
		{
			"name": "Scenario 3: End-to-end with ETL Copy",
			"item": [
				{
					"name": "Создание эксперимента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Эксперименты\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"         pm.response.to.have.status(201)\r",
									"     });\r",
									"\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #ef85ffa4;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#ef85ffa4;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление эксперимента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Эксперименты\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"guid\": \"{{experimentGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание модели в эксперименте",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Модели\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"test_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"prod_version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание шага \"Препроцессинг\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"preprocessingGuid\", jsonData.guid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"schema\": \"{{schema}}\",\r\n    \"object_datasource\": \"{{objectDatasource}}\",\r\n    \"source_step\": null,\r\n    \"columns\": [\r\n        {\r\n            \"column_name\": \"attrition\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": true,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"age\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"gender\",\r\n            \"column_type\": \"categorical\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"dailyrate\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        }\r\n    ],\r\n    \"preprocessors\": [\r\n        {\r\n            \"preprocessor\": \"scale_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"age\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"ohe_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"gender\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"minmaxnorm_processing\",\r\n            \"params\": {\r\n                \"feature_range\": [\r\n                    0,\r\n                    1\r\n                ]\r\n            },\r\n            \"column_name\": \"dailyrate\"\r\n        }\r\n    ],\r\n    \"strict_order\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/service-ml-middleware/api/steps/preprocessing",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"preprocessing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание шага \"Параметры модели\" с классическим алгоритмом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PARAMETERS\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"parametersGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"name\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"learning_task_type\": \"classification\",\r\n    \"algorithm_type\": \"classic\",\r\n    \"classic_ml_algorithm\": \"random_forest_classifier\",\r\n    \"neuro_dl_algorithm\": null,\r\n    \"algorithm_params\": {\r\n        \"criterion\": \"gini\",\r\n        \"max_depth\": 55,\r\n        \"class_weight\": \"balanced\",\r\n        \"max_features\": 1.0,\r\n        \"n_estimators\": 300,\r\n        \"min_samples_leaf\": 4,\r\n        \"min_samples_split\": 4\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/parameters",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание шага \"Тренировка\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"TRAINING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"trainingGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"metrics\": [\r\n        \"accuracy\",\r\n        \"precision\",\r\n        \"recall\",\r\n        \"f1\",\r\n        \"roc_auc\",\r\n        \"confusion_matrix\",\r\n        \"roc\"\r\n    ],\r\n    \"loss\": null,\r\n    \"optimizer\": null,\r\n    \"scheduler\": null,\r\n    \"val_size\": 0.2,\r\n    \"learning_rate\": null,\r\n    \"n_epochs\": null,\r\n    \"train_batch_size\": null,\r\n    \"val_batch_size\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/training",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"training"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание связи 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=ML\r",
									"// @allure.label.story=Связи\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{preprocessingGuid}}\",\r\n  \"type_first_step\": \"PREPROCESSING\",\r\n  \"second_step_id\": \"{{parametersGuid}}\",\r\n  \"type_second_step\": \"PARAMETERS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание связи 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Шаги\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{parametersGuid}}\",\r\n  \"type_first_step\": \"PARAMETERS\",\r\n  \"second_step_id\": \"{{trainingGuid}}\",\r\n  \"type_second_step\": \"TRAINING\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение идентификатора запуска",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"run_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"runGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/runs",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск препроцессинга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые значения\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"running\")\r",
									"});\r",
									"\r",
									"console.log(\"Запуск препроцессинга\")\r",
									"\r",
									"// Установка задержки на 30 секунд (30000 миллисекунд)\r",
									"setTimeout(function() {\r",
									"}, 30000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/preprocessing/{{preprocessingGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"preprocessing",
								"{{preprocessingGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск тренировки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"console.log(\"Запуск тренировки\")\r",
									"\r",
									"// Установка задержки на 60 секунд (60000 миллисекунд)\r",
									"setTimeout(function() {\r",
									"}, 60000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}/training?description=Описание запуска тест",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}",
								"training"
							],
							"query": [
								{
									"key": "description",
									"value": "Описание запуска тест"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка создания таблицы результатов препроцессинга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// Сохраняем текущую дату, задаем имя таблицы, обработанная таблица должна иметь имя в виде tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// Смещение в минутах относительно UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// Получаем час в выбранной таймзоне\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, была ли создана обработанная таблица\r",
									"pm.test(\"Таблица результатов препроцессинга создана\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка сохранения метрик",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"// Проверяем, что для созданной модели записались метрики качества\r",
									"pm.test(\"Метрики модели сохранены\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.data;\r",
									"    \r",
									"    pm.expect(data).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"select * from training_results where model_id='{{modelGuid}}'\",\r\n    \"data_source\": {\r\n        \"url\": \"bi-tst-01:5447\",\r\n        \"principal\": \"postgres\",\r\n        \"credential\": \"postgres\",\r\n        \"auth_type\": \"PASSWORD\",\r\n        \"db_type\": \"POSTGRES\"\r\n    },\r\n    \"db_name\": \"ml_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/connector-postgresql/v3/data-sources/get-data-set",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"connector-postgresql",
								"v3",
								"data-sources",
								"get-data-set"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение идентификатора версии",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Тело ответа содержит ожидаемые ключи\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"state\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"versionGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/versions",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение состояния версии - Продакшн",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=PRODUCTION",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "PRODUCTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание ETL задачи с ML-моделью",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 201\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var tableName = \"\";\r",
									"\r",
									"if (jsonData && jsonData.definition && jsonData.definition.nodes) {\r",
									"    for (let node of jsonData.definition.nodes) {\r",
									"        if (node.body && node.body.storage && node.body.storage.table_name) {\r",
									"            tableName = node.body.storage.table_name;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"etlTaskGuid\", jsonData.guid);\r",
									"     pm.collectionVariables.set(\"tableName\", tableName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"name\": \"{{randomString}}\",\r\n    \"definition\": {\r\n        \"nodes\": [\r\n            {\r\n                \"id\": \"cab0e621-82d4-4c1c-9cd6-40e0feb5ae61\",\r\n                \"system_type\": \"start\",\r\n                \"name\": \"\",\r\n                \"description\": \"\",\r\n                \"index\": 0,\r\n                \"x\": 20,\r\n                \"y\": 270,\r\n                \"width\": 100,\r\n                \"height\": 60,\r\n                \"component_name\": \"\",\r\n                \"etl_stage\": null,\r\n                \"body\": null,\r\n                \"base_task_guid\": null,\r\n                \"base_step_guid\": null\r\n            },\r\n            {\r\n                \"id\": \"076f15a3-bf61-4b84-abc5-62eaf115839a\",\r\n                \"system_type\": \"end\",\r\n                \"name\": \"\",\r\n                \"description\": \"\",\r\n                \"index\": 0,\r\n                \"x\": 1180,\r\n                \"y\": 270,\r\n                \"width\": 100,\r\n                \"height\": 60,\r\n                \"component_name\": \"\",\r\n                \"etl_stage\": null,\r\n                \"body\": null,\r\n                \"base_task_guid\": null,\r\n                \"base_step_guid\": null\r\n            },\r\n            {\r\n                \"id\": \"85b896a2-b51c-404c-be18-4e3ad0db87cf\",\r\n                \"system_type\": \"pass\",\r\n                \"name\": \"ML-модель\",\r\n                \"description\": \"Модель прогнозирования заболеваний легких\",\r\n                \"index\": 4,\r\n                \"x\": 860,\r\n                \"y\": 260,\r\n                \"width\": 200,\r\n                \"height\": 80,\r\n                \"component_name\": \"\",\r\n                \"etl_stage\": \"predictive_analytics\",\r\n                \"body\": {\r\n                    \"source\": {\r\n                        \"datasource\": {\r\n                            \"description\": null,\r\n                            \"name\": null,\r\n                            \"guid\": \"{{schema}}\",\r\n                            \"created_at\": null,\r\n                            \"deleted_at\": null,\r\n                            \"presentation_name\": null,\r\n                            \"system_datasource\": null,\r\n                            \"system_datasource_entity\": null\r\n                        },\r\n                        \"table_id\": \"{{objectDatasourcePredict}}\",\r\n                        \"table_name\": \"dataset_1\",\r\n                        \"table_presentation_name\": \"dataset_1\",\r\n                        \"table_schema_description\": null\r\n                    },\r\n                    \"storage\": {\r\n                        \"datasource\": {\r\n                            \"description\": null,\r\n                            \"name\": null,\r\n                            \"guid\": \"{{experimentSchema}}\",\r\n                            \"created_at\": null,\r\n                            \"deleted_at\": null,\r\n                            \"presentation_name\": null,\r\n                            \"system_datasource\": null,\r\n                            \"system_datasource_entity\": null\r\n                        },\r\n                        \"table_id\": null,\r\n                        \"table_name\": \"{{randomString}}\",\r\n                        \"table_presentation_name\": \"{{randomString}}\",\r\n                        \"table_schema_description\": null\r\n                    },\r\n                    \"version\": {\r\n                        \"version_id\": \"{{versionGuid}}\",\r\n                        \"version_number\": 1\r\n                    },\r\n                    \"etl_type\": \"ml_model\",\r\n                    \"storage_table_mode\": \"create\",\r\n                    \"response_timeout\": 3600000\r\n                },\r\n                \"base_task_guid\": null,\r\n                \"base_step_guid\": null\r\n            }\r\n        ],\r\n        \"transitions\": [\r\n            {\r\n                \"id\": \"66069875-b153-4e1d-86a6-6b9b7ef8bb18\",\r\n                \"type\": \"resolve\",\r\n                \"source\": {\r\n                    \"node_id\": \"cab0e621-82d4-4c1c-9cd6-40e0feb5ae61\",\r\n                    \"position\": \"right\"\r\n                },\r\n                \"destination\": {\r\n                    \"node_id\": \"85b896a2-b51c-404c-be18-4e3ad0db87cf\",\r\n                    \"position\": \"left\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"a66cf638-b492-42f5-a30d-7495a48840c4\",\r\n                \"type\": \"resolve\",\r\n                \"source\": {\r\n                    \"node_id\": \"85b896a2-b51c-404c-be18-4e3ad0db87cf\",\r\n                    \"position\": \"right\"\r\n                },\r\n                \"destination\": {\r\n                    \"node_id\": \"076f15a3-bf61-4b84-abc5-62eaf115839a\",\r\n                    \"position\": \"left\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-etl-middleware/api/etl-tasks",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-etl-middleware",
								"api",
								"etl-tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запуск ETL задачи",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Установка задержки на 60 секунд (60000 миллисекунд)\r",
									"setTimeout(function() {\r",
									"}, 60000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-etl-middleware/api/etl-tasks/{{etlTaskGuid}}/start",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-etl-middleware",
								"api",
								"etl-tasks",
								"{{etlTaskGuid}}",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение статуса экземпляра задачи",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"var statusValue = jsonData.content[0].status;\r",
									"\r",
									"pm.test(\"Проверка статуса ETL задачи = ЗАВЕРШЕНА\", function () {\r",
									"    pm.expect(statusValue).to.eql(\"completed\");\r",
									"});\r",
									"pm.collectionVariables.set(\"instanceStatus\", statusValue);\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-etl-middleware/api/etl-tasks/{{etlTaskGuid}}/instances?order=NEWEST_FIRST&page=0&page-size=1",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-etl-middleware",
								"api",
								"etl-tasks",
								"{{etlTaskGuid}}",
								"instances"
							],
							"query": [
								{
									"key": "order",
									"value": "NEWEST_FIRST"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "page-size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка создания таблицы результатов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"// Получаем список presentation_name из ответа\r",
									"var namesList = pm.response.json();\r",
									"\r",
									"// Получаем tableName из коллекции\r",
									"var tableName = pm.collectionVariables.get('tableName');\r",
									"\r",
									"// Проверяем каждый presentation_name в списке\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].presentation_name === tableName) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Проверяем, было ли найдено совпадение\r",
									"pm.test(\"Таблица результатов создана\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление ETL задачи",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical",
									"// @allure.label.epic=API",
									"// @allure.label.feature=Предиктивная аналитика",
									"// @allure.label.story=Версии",
									"",
									"pm.test(\"Код состояния - 200\", function () {",
									"     pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-etl-middleware/api/etl-tasks/{{etlTaskGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-etl-middleware",
								"api",
								"etl-tasks",
								"{{etlTaskGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение состояния версии - Архив",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Версии\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=ARCHIVE",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ARCHIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление запуска",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Запуски\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление модели",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Модели\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление эксперимента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=Предиктивная аналитика\r",
									"// @allure.label.story=Эксперименты\r",
									"\r",
									"pm.test(\"Код состояния - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments/{{experimentGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments",
								"{{experimentGuid}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to prod\n    \n10. Create ETL-task (with MLstep)\n    \n11. Delete a ETL-task\n    \n12. Delete a run\n    \n13. Delete a model\n    \n14. Delete an experiment"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Функция для наименований\r",
					"function randomString(length = 1) {\r",
					"    let result = \"\";\r",
					"    const characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
					"    const charactersLength = characters.length;\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"    }\r",
					"    return result;\r",
					"}\r",
					"\r",
					"const STRING_LEN = 10;\r",
					"pm.variables.set('randomString', randomString(STRING_LEN));\r",
					"\r",
					"// Авторизация, получение токена и добавление realm_guid в headers\r",
					"pm.request.headers.add({\r",
					"key: 'Realm_guid',\r",
					"value: 'eccfb99c-7a0e-45fe-bce0-a7ba31f2c99c'\r",
					"});\r",
					"\r",
					"pm.sendRequest({\r",
					"    url: \"http://bi-tst-01:8081/service-auth/auth/login\",\r",
					"    method: \"POST\",\r",
					"    header: {\r",
					"        \"Content-Type\": \"application/json\"\r",
					"    },\r",
					"    body: JSON.stringify({\r",
					"        \"username\": \"nikia\",\r",
					"        \"password\": \"wer\"\r",
					"    })\r",
					"},\r",
					"function (err, res) {\r",
					"    pm.environment.set(\"token\", res.json().access_token);\r",
					"    console.log(\"Autorization is done\")\r",
					"})"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "experimentSchema",
			"value": "1f6e4c39-c8fa-4195-a097-06f8adab8995",
			"type": "string"
		},
		{
			"key": "experimentGuid",
			"value": ""
		}
	]
}