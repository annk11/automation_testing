{
	"info": {
		"_postman_id": "64788896-8a89-4c2e-98d3-9a8bce0e77c5",
		"name": "API scenario testing [ML Release 3.1]",
		"description": "Collection contain scenario tests for ML.\n\n## DEV-STAND\n\n**Collection variables:**\n\n| Variable | Value |\n| --- | --- |\n| schema | 70e95bfa-c76b-456d-aebb-557aeb66ab5e |\n| objectDatasource | 05150093-beb0-4f58-a8e7-fb5e144709e6 |\n| objectDatasourcePredict | 6d220e16-b060-4c2d-9536-986477b52c9c |\n| _experimentGuid_ | _{{experimentGuid}}_ |\n| _modelGuid_ | _{{modelGuid}}_ |\n| _statusCode_ | _{{statusCode}}_ |\n| _preprocessingGuid_ | _{{preprocessingGuid}}_ |\n| _parametersGuid_ | _{{parametersGuid}}_ |\n| _trainingGuid_ | _{{trainingGuid}}_ |\n| _runGuid_ | _{{runGuid}}_ |\n| _versionGuid_ | _{{versionGuid}}_ |\n\n**Environment variables:**\n\n| Variable | Value |\n| --- | --- |\n| GATEWAY_URL | bi-dev-01:8081 |\n| realm_guid | 58e18204-844f-4b6b-a27b-7ee56609ee47 |\n| _token_ | _{{token}}_ |\n\n**Autorization (Pre-Script):**\n\n``` javascript\npm.sendRequest({\n    url: \"http://bi-dev-01:8081/service-auth/auth/login\",\n    method: \"POST\",\n    header: {\n        \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n        \"username\": \"nikia\",\n        \"password\": \"bnm\"\n    })\n},\nfunction (err, res) {\n    pm.environment.set(\"token\", res.json().access_token);\n    console.log(\"Autorization\")\n})\npm.request.headers.add({\nkey: 'Realm_guid',\nvalue: '5d8a2add-484f-4b6c-aa79-9b2a6e8635c2'\n});\n\n ```\n\n## TEST-STAND\n\n**Collection variables:**\n\n| Variable | Value |\n| --- | --- |\n| schema | 70e95bfa-c76b-456d-aebb-557aeb66ab5e |\n| objectDatasource | 05150093-beb0-4f58-a8e7-fb5e144709e6 |\n| objectDatasourcePredict | 6d220e16-b060-4c2d-9536-986477b52c9c |\n| _experimentGuid_ | _{{experimentGuid}}_ |\n| _modelGuid_ | _{{modelGuid}}_ |\n| _statusCode_ | _{{statusCode}}_ |\n| _preprocessingGuid_ | _{{preprocessingGuid}}_ |\n| _parametersGuid_ | _{{parametersGuid}}_ |\n| _trainingGuid_ | _{{trainingGuid}}_ |\n| _runGuid_ | _{{runGuid}}_ |\n| _versionGuid_ | _{{versionGuid}}_ |\n\n**Environment variables:**\n\n| Variable | Value |\n| --- | --- |\n| GATEWAY_URL | bi-tst-01:8081 |\n| realm_guid | eccfb99c-7a0e-45fe-bce0-a7ba31f2c99c |\n| _token_ | _{{token}}_ |\n\n**Autorization (Pre-Script):**\n\n``` javascript\npm.sendRequest({\n    url: \"http://bi-tst-01:8081/service-auth/auth/login\",\n    method: \"POST\",\n    header: {\n        \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n        \"username\": \"nikia\",\n        \"password\": \"wer\"\n    })\n},\nfunction (err, res) {\n    pm.environment.set(\"token\", res.json().access_token);\n    console.log(\"Autorization\")\n})\npm.request.headers.add({\nkey: 'Realm_guid',\nvalue: 'eccfb99c-7a0e-45fe-bce0-a7ba31f2c99c'\n});\n\n ```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30928254"
	},
	"item": [
		{
			"name": "Scenario 1: End-to-end (ML)",
			"item": [
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"         pm.response.to.have.status(201)\r",
									"     });\r",
									"\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #ef85ffa4;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#ef85ffa4;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РћР±РЅРѕРІР»РµРЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"guid\": \"{{experimentGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ РјРѕРґРµР»Рё РІ СЌРєСЃРїРµСЂРёРјРµРЅС‚Рµ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"test_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"prod_version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РџСЂРµРїСЂРѕС†РµСЃСЃРёРЅРі\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"preprocessingGuid\", jsonData.guid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"schema\": \"{{schema}}\",\r\n    \"object_datasource\": \"{{objectDatasource}}\",\r\n    \"source_step\": null,\r\n    \"columns\": [\r\n        {\r\n            \"column_name\": \"attrition\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": true,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"age\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"gender\",\r\n            \"column_type\": \"categorical\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"dailyrate\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        }\r\n    ],\r\n    \"preprocessors\": [\r\n        {\r\n            \"preprocessor\": \"scale_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"age\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"ohe_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"gender\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"minmaxnorm_processing\",\r\n            \"params\": {\r\n                \"feature_range\": [\r\n                    0,\r\n                    1\r\n                ]\r\n            },\r\n            \"column_name\": \"dailyrate\"\r\n        }\r\n    ],\r\n    \"strict_order\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/service-ml-middleware/api/steps/preprocessing",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"preprocessing"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РџР°СЂР°РјРµС‚СЂС‹ РјРѕРґРµР»Рё\" СЃ РєР»Р°СЃСЃРёС‡РµСЃРєРёРј Р°Р»РіРѕСЂРёС‚РјРѕРј",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PARAMETERS\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"parametersGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"name\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"learning_task_type\": \"classification\",\r\n    \"algorithm_type\": \"classic\",\r\n    \"classic_ml_algorithm\": \"random_forest_classifier\",\r\n    \"neuro_dl_algorithm\": null,\r\n    \"algorithm_params\": {\r\n        \"criterion\": \"gini\",\r\n        \"max_depth\": 55,\r\n        \"class_weight\": \"balanced\",\r\n        \"max_features\": 1.0,\r\n        \"n_estimators\": 300,\r\n        \"min_samples_leaf\": 4,\r\n        \"min_samples_split\": 4\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/parameters",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РўСЂРµРЅРёСЂРѕРІРєР°\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"TRAINING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"trainingGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"metrics\": [\r\n        \"accuracy\",\r\n        \"precision\",\r\n        \"recall\",\r\n        \"f1\",\r\n        \"roc_auc\",\r\n        \"confusion_matrix\",\r\n        \"roc\"\r\n    ],\r\n    \"loss\": null,\r\n    \"optimizer\": null,\r\n    \"scheduler\": null,\r\n    \"val_size\": 0.2,\r\n    \"learning_rate\": null,\r\n    \"n_epochs\": null,\r\n    \"train_batch_size\": null,\r\n    \"val_batch_size\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/training",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"training"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЃРІСЏР·Рё 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{preprocessingGuid}}\",\r\n  \"type_first_step\": \"PREPROCESSING\",\r\n  \"second_step_id\": \"{{parametersGuid}}\",\r\n  \"type_second_step\": \"PARAMETERS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЃРІСЏР·Рё 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{parametersGuid}}\",\r\n  \"type_first_step\": \"PARAMETERS\",\r\n  \"second_step_id\": \"{{trainingGuid}}\",\r\n  \"type_second_step\": \"TRAINING\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџРѕР»СѓС‡РµРЅРёРµ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂР° Р·Р°РїСѓСЃРєР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"run_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"runGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/runs",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"running\")\r",
									"});\r",
									"\r",
									"console.log(\"Р—Р°РїСѓСЃРє РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°\")\r",
									"\r",
									"// РЈСЃС‚Р°РЅРѕРІРєР° Р·Р°РґРµСЂР¶РєРё РЅР° 30 СЃРµРєСѓРЅРґ (30000 РјРёР»Р»РёСЃРµРєСѓРЅРґ)\r",
									"setTimeout(function() {\r",
									"}, 30000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/preprocessing/{{preprocessingGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"preprocessing",
								"{{preprocessingGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє С‚СЂРµРЅРёСЂРѕРІРєРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"console.log(\"Р—Р°РїСѓСЃРє С‚СЂРµРЅРёСЂРѕРІРєРё\")\r",
									"\r",
									"// РЈСЃС‚Р°РЅРѕРІРєР° Р·Р°РґРµСЂР¶РєРё РЅР° 60 СЃРµРєСѓРЅРґ (60000 РјРёР»Р»РёСЃРµРєСѓРЅРґ)\r",
									"setTimeout(function() {\r",
									"}, 60000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}/training?description=РћРїРёСЃР°РЅРёРµ Р·Р°РїСѓСЃРєР° С‚РµСЃС‚",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}",
								"training"
							],
							"query": [
								{
									"key": "description",
									"value": "РћРїРёСЃР°РЅРёРµ Р·Р°РїСѓСЃРєР° С‚РµСЃС‚"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕР·РґР°РЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// РЎРјРµС‰РµРЅРёРµ РІ РјРёРЅСѓС‚Р°С… РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅРѕ UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// РџРѕР»СѓС‡Р°РµРј С‡Р°СЃ РІ РІС‹Р±СЂР°РЅРЅРѕР№ С‚Р°Р№РјР·РѕРЅРµ\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р°\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР° СЃРѕР·РґР°РЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕС…СЂР°РЅРµРЅРёСЏ РјРµС‚СЂРёРє",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ РґР»СЏ СЃРѕР·РґР°РЅРЅРѕР№ РјРѕРґРµР»Рё Р·Р°РїРёСЃР°Р»РёСЃСЊ РјРµС‚СЂРёРєРё РєР°С‡РµСЃС‚РІР°\r",
									"pm.test(\"РњРµС‚СЂРёРєРё РјРѕРґРµР»Рё СЃРѕС…СЂР°РЅРµРЅС‹\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.data;\r",
									"    \r",
									"    pm.expect(data).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"select * from training_results where model_id='{{modelGuid}}'\",\r\n    \"data_source\": {\r\n        \"url\": \"bi-tst-01:5447\",\r\n        \"principal\": \"postgres\",\r\n        \"credential\": \"postgres\",\r\n        \"auth_type\": \"PASSWORD\",\r\n        \"db_type\": \"POSTGRES\"\r\n    },\r\n    \"db_name\": \"ml_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/connector-postgresql/v3/data-sources/get-data-set",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"connector-postgresql",
								"v3",
								"data-sources",
								"get-data-set"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџРѕР»СѓС‡РµРЅРёРµ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂР° РІРµСЂСЃРёРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"state\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"versionGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/versions",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "РР·РјРµРЅРµРЅРёРµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РІРµСЂСЃРёРё - РўРµСЃС‚РёСЂРѕРІР°РЅРёРµ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=TEST",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "TEST"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє РЅР° С‚РµСЃС‚РёСЂРѕРІР°РЅРёРµ (РѕС†РµРЅРєР°) РІРµСЂСЃРёРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"version\": \"{{versionGuid}}\",\r\n    \"source_schema\": \"{{schema}}\",\r\n    \"source_object\": \"{{objectDatasource}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/testing",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"testing"
							]
						}
					},
					"response": []
				},
				{
					"name": "РР·РјРµРЅРµРЅРёРµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РІРµСЂСЃРёРё - РџСЂРѕРґР°РєС€РЅ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=PRODUCTION",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "PRODUCTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє РЅР° РїРѕР»СѓС‡РµРЅРёРµ РїСЂРµРґСЃРєР°Р·Р°РЅРёР№ РІРµСЂСЃРёРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"version\": \"{{versionGuid}}\",\r\n    \"source_schema\": \"{{schema}}\",\r\n    \"source_object\": \"{{objectDatasourcePredict}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/prediction",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"prediction"
							]
						}
					},
					"response": []
				},
				{
					"name": "РР·РјРµРЅРµРЅРёРµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РІРµСЂСЃРёРё - РђСЂС…РёРІ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=ARCHIVE",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ARCHIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕР·РґР°РЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"test\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"testingDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"console.log(testingDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(testingDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° С‚Р°Р±Р»РёС†Р° СЃ СЂРµР·СѓР»СЊС‚Р°С‚Р°РјРё С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ СЃРѕР·РґР°РЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕР·РґР°РЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРґСЃРєР°Р·Р°РЅРёР№",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"pred\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"predictionDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"console.log(predictionDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(predictionDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° С‚Р°Р±Р»РёС†Р° СЃ СЂРµР·СѓР»СЊС‚Р°С‚Р°РјРё РїСЂРµРґСЃРєР°Р·Р°РЅРёР№\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРґСЃРєР°Р·Р°РЅРёР№ СЃРѕР·РґР°РЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ Р·Р°РїСѓСЃРєР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ РјРѕРґРµР»Рё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments/{{experimentGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments",
								"{{experimentGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СѓРґР°Р»РµРЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// РЎРјРµС‰РµРЅРёРµ РІ РјРёРЅСѓС‚Р°С… РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅРѕ UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// РџРѕР»СѓС‡Р°РµРј С‡Р°СЃ РІ РІС‹Р±СЂР°РЅРЅРѕР№ С‚Р°Р№РјР·РѕРЅРµ\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р°\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР° СѓРґР°Р»РµРЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СѓРґР°Р»РµРЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРґСЃРєР°Р·Р°РЅРёР№",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"prediction\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"// console.log(preprocessedDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° С‚Р°Р±Р»РёС†Р° СЃ СЂРµР·СѓР»СЊС‚Р°С‚Р°РјРё РїСЂРµРґСЃРєР°Р·Р°РЅРёР№\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРґСЃРєР°Р·Р°РЅРёР№ СѓРґР°Р»РµРЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СѓРґР°Р»РµРЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"testing\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"// console.log(preprocessedDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° С‚Р°Р±Р»РёС†Р° СЃ СЂРµР·СѓР»СЊС‚Р°С‚Р°РјРё С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ СѓРґР°Р»РµРЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СѓРґР°Р»РµРЅРёСЏ РјРµС‚СЂРёРє",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ML-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ РґР»СЏ СЃРѕР·РґР°РЅРЅРѕР№ РјРѕРґРµР»Рё РјРµС‚СЂРёРєРё РєР°С‡РµСЃС‚РІР° Р±С‹Р»Рё СѓРґР°Р»РµРЅС‹\r",
									"pm.test(\"РњРµС‚СЂРёРєРё РјРѕРґРµР»Рё СѓРґР°Р»РµРЅС‹\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.data;\r",
									"    \r",
									"// РџСЂРѕРІРµСЂРєР° РЅР° РїСѓСЃС‚РѕС‚Сѓ РѕР±СЉРµРєС‚Р° \"data\"\r",
									"    pm.expect(data).to.eql([]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"select * from training_results where model_id='{{modelGuid}}'\",\r\n    \"data_source\": {\r\n        \"url\": \"bi-dev-01:5447\",\r\n        \"principal\": \"postgres\",\r\n        \"credential\": \"postgres\",\r\n        \"auth_type\": \"PASSWORD\",\r\n        \"db_type\": \"POSTGRES\"\r\n    },\r\n    \"db_name\": \"ml_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/connector-postgresql/v3/data-sources/get-data-set",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"connector-postgresql",
								"v3",
								"data-sources",
								"get-data-set"
							]
						}
					},
					"response": []
				}
			],
			"description": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with ML algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment"
		},
		{
			"name": "Scenario 2: End-to-end (DL)",
			"item": [
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"         pm.response.to.have.status(201)\r",
									"     });\r",
									"\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #ef85ffa4;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#ef85ffa4;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РћР±РЅРѕРІР»РµРЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"guid\": \"{{experimentGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ РјРѕРґРµР»Рё РІ СЌРєСЃРїРµСЂРёРјРµРЅС‚Рµ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"test_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"prod_version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РџСЂРµРїСЂРѕС†РµСЃСЃРёРЅРі\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"preprocessingGuid\", jsonData.guid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"schema\": \"{{schema}}\",\r\n    \"object_datasource\": \"{{objectDatasource}}\",\r\n    \"source_step\": null,\r\n    \"columns\": [\r\n        {\r\n            \"column_name\": \"attrition\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": true,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"age\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"gender\",\r\n            \"column_type\": \"categorical\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"dailyrate\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        }\r\n    ],\r\n    \"preprocessors\": [\r\n        {\r\n            \"preprocessor\": \"scale_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"age\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"ohe_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"gender\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"minmaxnorm_processing\",\r\n            \"params\": {\r\n                \"feature_range\": [\r\n                    0,\r\n                    1\r\n                ]\r\n            },\r\n            \"column_name\": \"dailyrate\"\r\n        }\r\n    ],\r\n    \"strict_order\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/service-ml-middleware/api/steps/preprocessing",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"preprocessing"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РџР°СЂР°РјРµС‚СЂС‹ РјРѕРґРµР»Рё\" СЃ РЅРµР№СЂРѕСЃРµС‚РµРІС‹Рј Р°Р»РіРѕСЂРёС‚РјРѕРј",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PARAMETERS\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"parametersGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"name\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"learning_task_type\": \"classification\",\r\n    \"algorithm_type\": \"neuro\",\r\n    \"classic_ml_algorithm\": null,\r\n    \"neuro_dl_algorithm\": \"mlp\",\r\n    \"algorithm_params\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/parameters",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РўСЂРµРЅРёСЂРѕРІРєР°\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"TRAINING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"trainingGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"metrics\": [\r\n        \"accuracy\",\r\n        \"precision\",\r\n        \"recall\",\r\n        \"f1\",\r\n        \"roc_auc\",\r\n        \"confusion_matrix\",\r\n        \"roc\"\r\n    ],\r\n    \"loss\": null,\r\n    \"optimizer\": null,\r\n    \"scheduler\": null,\r\n    \"val_size\": 0.2,\r\n    \"learning_rate\": null,\r\n    \"n_epochs\": null,\r\n    \"train_batch_size\": null,\r\n    \"val_batch_size\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/training",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"training"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЃРІСЏР·Рё 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{preprocessingGuid}}\",\r\n  \"type_first_step\": \"PREPROCESSING\",\r\n  \"second_step_id\": \"{{parametersGuid}}\",\r\n  \"type_second_step\": \"PARAMETERS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЃРІСЏР·Рё 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{parametersGuid}}\",\r\n  \"type_first_step\": \"PARAMETERS\",\r\n  \"second_step_id\": \"{{trainingGuid}}\",\r\n  \"type_second_step\": \"TRAINING\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџРѕР»СѓС‡РµРЅРёРµ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂР° Р·Р°РїСѓСЃРєР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"run_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"runGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/runs",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"running\")\r",
									"});\r",
									"\r",
									"console.log(\"Р—Р°РїСѓСЃРє РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°\")\r",
									"\r",
									"// РЈСЃС‚Р°РЅРѕРІРєР° Р·Р°РґРµСЂР¶РєРё РЅР° 30 СЃРµРєСѓРЅРґ (30000 РјРёР»Р»РёСЃРµРєСѓРЅРґ)\r",
									"setTimeout(function() {\r",
									"}, 30000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/preprocessing/{{preprocessingGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"preprocessing",
								"{{preprocessingGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє С‚СЂРµРЅРёСЂРѕРІРєРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"console.log(\"Р—Р°РїСѓСЃРє С‚СЂРµРЅРёСЂРѕРІРєРё\")\r",
									"\r",
									"// РЈСЃС‚Р°РЅРѕРІРєР° Р·Р°РґРµСЂР¶РєРё РЅР° 60 СЃРµРєСѓРЅРґ (60000 РјРёР»Р»РёСЃРµРєСѓРЅРґ)\r",
									"setTimeout(function() {\r",
									"}, 60000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}/training?description=РћРїРёСЃР°РЅРёРµ Р·Р°РїСѓСЃРєР° С‚РµСЃС‚",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}",
								"training"
							],
							"query": [
								{
									"key": "description",
									"value": "РћРїРёСЃР°РЅРёРµ Р·Р°РїСѓСЃРєР° С‚РµСЃС‚"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕР·РґР°РЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// РЎРјРµС‰РµРЅРёРµ РІ РјРёРЅСѓС‚Р°С… РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅРѕ UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// РџРѕР»СѓС‡Р°РµРј С‡Р°СЃ РІ РІС‹Р±СЂР°РЅРЅРѕР№ С‚Р°Р№РјР·РѕРЅРµ\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р°\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР° СЃРѕР·РґР°РЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕС…СЂР°РЅРµРЅРёСЏ РјРµС‚СЂРёРє",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ РґР»СЏ СЃРѕР·РґР°РЅРЅРѕР№ РјРѕРґРµР»Рё Р·Р°РїРёСЃР°Р»РёСЃСЊ РјРµС‚СЂРёРєРё РєР°С‡РµСЃС‚РІР°\r",
									"pm.test(\"РњРµС‚СЂРёРєРё РјРѕРґРµР»Рё СЃРѕС…СЂР°РЅРµРЅС‹\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.data;\r",
									"    \r",
									"    pm.expect(data).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"select * from training_results where model_id='{{modelGuid}}'\",\r\n    \"data_source\": {\r\n        \"url\": \"bi-tst-01:5447\",\r\n        \"principal\": \"postgres\",\r\n        \"credential\": \"postgres\",\r\n        \"auth_type\": \"PASSWORD\",\r\n        \"db_type\": \"POSTGRES\"\r\n    },\r\n    \"db_name\": \"ml_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/connector-postgresql/v3/data-sources/get-data-set",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"connector-postgresql",
								"v3",
								"data-sources",
								"get-data-set"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџРѕР»СѓС‡РµРЅРёРµ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂР° РІРµСЂСЃРёРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"state\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"versionGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/versions",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "РР·РјРµРЅРµРЅРёРµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РІРµСЂСЃРёРё - РўРµСЃС‚РёСЂРѕРІР°РЅРёРµ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=TEST",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "TEST"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє РЅР° С‚РµСЃС‚РёСЂРѕРІР°РЅРёРµ (РѕС†РµРЅРєР°) РІРµСЂСЃРёРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"version\": \"{{versionGuid}}\",\r\n    \"source_schema\": \"{{schema}}\",\r\n    \"source_object\": \"{{objectDatasource}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/testing",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"testing"
							]
						}
					},
					"response": []
				},
				{
					"name": "РР·РјРµРЅРµРЅРёРµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РІРµСЂСЃРёРё - РџСЂРѕРґР°РєС€РЅ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=PRODUCTION",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "PRODUCTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє РЅР° РїРѕР»СѓС‡РµРЅРёРµ РїСЂРµРґСЃРєР°Р·Р°РЅРёР№ РІРµСЂСЃРёРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"version\": \"{{versionGuid}}\",\r\n    \"source_schema\": \"{{schema}}\",\r\n    \"source_object\": \"{{objectDatasourcePredict}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/prediction",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"prediction"
							]
						}
					},
					"response": []
				},
				{
					"name": "РР·РјРµРЅРµРЅРёРµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РІРµСЂСЃРёРё - РђСЂС…РёРІ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=ARCHIVE",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ARCHIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕР·РґР°РЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"test\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"testingDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"console.log(testingDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(testingDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° С‚Р°Р±Р»РёС†Р° СЃ СЂРµР·СѓР»СЊС‚Р°С‚Р°РјРё С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ СЃРѕР·РґР°РЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕР·РґР°РЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРґСЃРєР°Р·Р°РЅРёР№",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"pred\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"predictionDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"console.log(predictionDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(predictionDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° С‚Р°Р±Р»РёС†Р° СЃ СЂРµР·СѓР»СЊС‚Р°С‚Р°РјРё РїСЂРµРґСЃРєР°Р·Р°РЅРёР№\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРґСЃРєР°Р·Р°РЅРёР№ СЃРѕР·РґР°РЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ Р·Р°РїСѓСЃРєР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ РјРѕРґРµР»Рё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments/{{experimentGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments",
								"{{experimentGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СѓРґР°Р»РµРЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// РЎРјРµС‰РµРЅРёРµ РІ РјРёРЅСѓС‚Р°С… РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅРѕ UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// РџРѕР»СѓС‡Р°РµРј С‡Р°СЃ РІ РІС‹Р±СЂР°РЅРЅРѕР№ С‚Р°Р№РјР·РѕРЅРµ\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р°\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР° СѓРґР°Р»РµРЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СѓРґР°Р»РµРЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРґСЃРєР°Р·Р°РЅРёР№",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"prediction\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"// console.log(preprocessedDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° С‚Р°Р±Р»РёС†Р° СЃ СЂРµР·СѓР»СЊС‚Р°С‚Р°РјРё РїСЂРµРґСЃРєР°Р·Р°РЅРёР№\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРґСЃРєР°Р·Р°РЅРёР№ СѓРґР°Р»РµРЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СѓРґР°Р»РµРЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4)\r",
									"var tableName = \"testing\";\r",
									"\r",
									"var date = new Date().toISOString()\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear\r",
									"// console.log(preprocessedDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° С‚Р°Р±Р»РёС†Р° СЃ СЂРµР·СѓР»СЊС‚Р°С‚Р°РјРё С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ СѓРґР°Р»РµРЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СѓРґР°Р»РµРЅРёСЏ РјРµС‚СЂРёРє",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E DL-Р°Р»РіРѕСЂРёС‚Рј\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ РґР»СЏ СЃРѕР·РґР°РЅРЅРѕР№ РјРѕРґРµР»Рё РјРµС‚СЂРёРєРё РєР°С‡РµСЃС‚РІР° Р±С‹Р»Рё СѓРґР°Р»РµРЅС‹\r",
									"pm.test(\"РњРµС‚СЂРёРєРё РјРѕРґРµР»Рё СѓРґР°Р»РµРЅС‹\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.data;\r",
									"    \r",
									"// РџСЂРѕРІРµСЂРєР° РЅР° РїСѓСЃС‚РѕС‚Сѓ РѕР±СЉРµРєС‚Р° \"data\"\r",
									"    pm.expect(data).to.eql([]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"select * from training_results where model_id='{{modelGuid}}'\",\r\n    \"data_source\": {\r\n        \"url\": \"bi-dev-01:5447\",\r\n        \"principal\": \"postgres\",\r\n        \"credential\": \"postgres\",\r\n        \"auth_type\": \"PASSWORD\",\r\n        \"db_type\": \"POSTGRES\"\r\n    },\r\n    \"db_name\": \"ml_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/connector-postgresql/v3/data-sources/get-data-set",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"connector-postgresql",
								"v3",
								"data-sources",
								"get-data-set"
							]
						}
					},
					"response": []
				}
			],
			"description": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment"
		},
		{
			"name": "Scenario 3: End-to-end with ETL",
			"item": [
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"         pm.response.to.have.status(201)\r",
									"     });\r",
									"\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #ef85ffa4;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#ef85ffa4;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РћР±РЅРѕРІР»РµРЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"guid\": \"{{experimentGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ РјРѕРґРµР»Рё РІ СЌРєСЃРїРµСЂРёРјРµРЅС‚Рµ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"test_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"prod_version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РџСЂРµРїСЂРѕС†РµСЃСЃРёРЅРі\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"preprocessingGuid\", jsonData.guid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"schema\": \"{{schema}}\",\r\n    \"object_datasource\": \"{{objectDatasource}}\",\r\n    \"source_step\": null,\r\n    \"columns\": [\r\n        {\r\n            \"column_name\": \"attrition\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": true,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"age\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"gender\",\r\n            \"column_type\": \"categorical\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"dailyrate\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        }\r\n    ],\r\n    \"preprocessors\": [\r\n        {\r\n            \"preprocessor\": \"scale_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"age\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"ohe_processing\",\r\n            \"params\": {},\r\n            \"column_name\": \"gender\"\r\n        },\r\n        {\r\n            \"preprocessor\": \"minmaxnorm_processing\",\r\n            \"params\": {\r\n                \"feature_range\": [\r\n                    0,\r\n                    1\r\n                ]\r\n            },\r\n            \"column_name\": \"dailyrate\"\r\n        }\r\n    ],\r\n    \"strict_order\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/service-ml-middleware/api/steps/preprocessing",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"preprocessing"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РџР°СЂР°РјРµС‚СЂС‹ РјРѕРґРµР»Рё\" СЃ РєР»Р°СЃСЃРёС‡РµСЃРєРёРј Р°Р»РіРѕСЂРёС‚РјРѕРј",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PARAMETERS\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"parametersGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"name\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"learning_task_type\": \"classification\",\r\n    \"algorithm_type\": \"classic\",\r\n    \"classic_ml_algorithm\": \"random_forest_classifier\",\r\n    \"neuro_dl_algorithm\": null,\r\n    \"algorithm_params\": {\r\n        \"criterion\": \"gini\",\r\n        \"max_depth\": 55,\r\n        \"class_weight\": \"balanced\",\r\n        \"max_features\": 1.0,\r\n        \"n_estimators\": 300,\r\n        \"min_samples_leaf\": 4,\r\n        \"min_samples_split\": 4\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/parameters",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РўСЂРµРЅРёСЂРѕРІРєР°\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"TRAINING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"trainingGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"metrics\": [\r\n        \"accuracy\",\r\n        \"precision\",\r\n        \"recall\",\r\n        \"f1\",\r\n        \"roc_auc\",\r\n        \"confusion_matrix\",\r\n        \"roc\"\r\n    ],\r\n    \"loss\": null,\r\n    \"optimizer\": null,\r\n    \"scheduler\": null,\r\n    \"val_size\": 0.2,\r\n    \"learning_rate\": null,\r\n    \"n_epochs\": null,\r\n    \"train_batch_size\": null,\r\n    \"val_batch_size\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/training",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"training"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЃРІСЏР·Рё 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{preprocessingGuid}}\",\r\n  \"type_first_step\": \"PREPROCESSING\",\r\n  \"second_step_id\": \"{{parametersGuid}}\",\r\n  \"type_second_step\": \"PARAMETERS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЃРІСЏР·Рё 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{parametersGuid}}\",\r\n  \"type_first_step\": \"PARAMETERS\",\r\n  \"second_step_id\": \"{{trainingGuid}}\",\r\n  \"type_second_step\": \"TRAINING\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџРѕР»СѓС‡РµРЅРёРµ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂР° Р·Р°РїСѓСЃРєР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"run_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"runGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/runs",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"running\")\r",
									"});\r",
									"\r",
									"console.log(\"Р—Р°РїСѓСЃРє РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°\")\r",
									"\r",
									"// РЈСЃС‚Р°РЅРѕРІРєР° Р·Р°РґРµСЂР¶РєРё РЅР° 30 СЃРµРєСѓРЅРґ (30000 РјРёР»Р»РёСЃРµРєСѓРЅРґ)\r",
									"setTimeout(function() {\r",
									"}, 30000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/preprocessing/{{preprocessingGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"preprocessing",
								"{{preprocessingGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє С‚СЂРµРЅРёСЂРѕРІРєРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"console.log(\"Р—Р°РїСѓСЃРє С‚СЂРµРЅРёСЂРѕРІРєРё\")\r",
									"\r",
									"// РЈСЃС‚Р°РЅРѕРІРєР° Р·Р°РґРµСЂР¶РєРё РЅР° 60 СЃРµРєСѓРЅРґ (60000 РјРёР»Р»РёСЃРµРєСѓРЅРґ)\r",
									"setTimeout(function() {\r",
									"}, 60000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}/training?description=РћРїРёСЃР°РЅРёРµ Р·Р°РїСѓСЃРєР° С‚РµСЃС‚",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}",
								"training"
							],
							"query": [
								{
									"key": "description",
									"value": "РћРїРёСЃР°РЅРёРµ Р·Р°РїСѓСЃРєР° С‚РµСЃС‚"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕР·РґР°РЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// РЎРјРµС‰РµРЅРёРµ РІ РјРёРЅСѓС‚Р°С… РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅРѕ UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// РџРѕР»СѓС‡Р°РµРј С‡Р°СЃ РІ РІС‹Р±СЂР°РЅРЅРѕР№ С‚Р°Р№РјР·РѕРЅРµ\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р°\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР° СЃРѕР·РґР°РЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕС…СЂР°РЅРµРЅРёСЏ РјРµС‚СЂРёРє",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ РґР»СЏ СЃРѕР·РґР°РЅРЅРѕР№ РјРѕРґРµР»Рё Р·Р°РїРёСЃР°Р»РёСЃСЊ РјРµС‚СЂРёРєРё РєР°С‡РµСЃС‚РІР°\r",
									"pm.test(\"РњРµС‚СЂРёРєРё РјРѕРґРµР»Рё СЃРѕС…СЂР°РЅРµРЅС‹\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.data;\r",
									"    \r",
									"    pm.expect(data).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"select * from training_results where model_id='{{modelGuid}}'\",\r\n    \"data_source\": {\r\n        \"url\": \"bi-tst-01:5447\",\r\n        \"principal\": \"postgres\",\r\n        \"credential\": \"postgres\",\r\n        \"auth_type\": \"PASSWORD\",\r\n        \"db_type\": \"POSTGRES\"\r\n    },\r\n    \"db_name\": \"ml_result\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/connector-postgresql/v3/data-sources/get-data-set",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"connector-postgresql",
								"v3",
								"data-sources",
								"get-data-set"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџРѕР»СѓС‡РµРЅРёРµ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂР° РІРµСЂСЃРёРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"state\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"versionGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/versions",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "РР·РјРµРЅРµРЅРёРµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РІРµСЂСЃРёРё - РџСЂРѕРґР°РєС€РЅ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=PRODUCTION",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "PRODUCTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ ETL Р·Р°РґР°С‡Рё СЃ ML-РјРѕРґРµР»СЊСЋ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var tableName = \"\";\r",
									"\r",
									"if (jsonData && jsonData.definition && jsonData.definition.nodes) {\r",
									"    for (let node of jsonData.definition.nodes) {\r",
									"        if (node.body && node.body.storage && node.body.storage.table_name) {\r",
									"            tableName = node.body.storage.table_name;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"etlTaskGuid\", jsonData.guid);\r",
									"     pm.collectionVariables.set(\"tableName\", tableName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"name\": \"{{randomString}}\",\r\n    \"definition\": {\r\n        \"nodes\": [\r\n            {\r\n                \"id\": \"cab0e621-82d4-4c1c-9cd6-40e0feb5ae61\",\r\n                \"system_type\": \"start\",\r\n                \"name\": \"\",\r\n                \"description\": \"\",\r\n                \"index\": 0,\r\n                \"x\": 20,\r\n                \"y\": 270,\r\n                \"width\": 100,\r\n                \"height\": 60,\r\n                \"component_name\": \"\",\r\n                \"etl_stage\": null,\r\n                \"body\": null,\r\n                \"base_task_guid\": null,\r\n                \"base_step_guid\": null\r\n            },\r\n            {\r\n                \"id\": \"076f15a3-bf61-4b84-abc5-62eaf115839a\",\r\n                \"system_type\": \"end\",\r\n                \"name\": \"\",\r\n                \"description\": \"\",\r\n                \"index\": 0,\r\n                \"x\": 1180,\r\n                \"y\": 270,\r\n                \"width\": 100,\r\n                \"height\": 60,\r\n                \"component_name\": \"\",\r\n                \"etl_stage\": null,\r\n                \"body\": null,\r\n                \"base_task_guid\": null,\r\n                \"base_step_guid\": null\r\n            },\r\n            {\r\n                \"id\": \"85b896a2-b51c-404c-be18-4e3ad0db87cf\",\r\n                \"system_type\": \"pass\",\r\n                \"name\": \"ML-РјРѕРґРµР»СЊ\",\r\n                \"description\": \"РњРѕРґРµР»СЊ РїСЂРѕРіРЅРѕР·РёСЂРѕРІР°РЅРёСЏ Р·Р°Р±РѕР»РµРІР°РЅРёР№ Р»РµРіРєРёС…\",\r\n                \"index\": 4,\r\n                \"x\": 860,\r\n                \"y\": 260,\r\n                \"width\": 200,\r\n                \"height\": 80,\r\n                \"component_name\": \"\",\r\n                \"etl_stage\": \"predictive_analytics\",\r\n                \"body\": {\r\n                    \"source\": {\r\n                        \"datasource\": {\r\n                            \"description\": null,\r\n                            \"name\": null,\r\n                            \"guid\": \"{{schema}}\",\r\n                            \"created_at\": null,\r\n                            \"deleted_at\": null,\r\n                            \"presentation_name\": null,\r\n                            \"system_datasource\": null,\r\n                            \"system_datasource_entity\": null\r\n                        },\r\n                        \"table_id\": \"{{objectDatasourcePredict}}\",\r\n                        \"table_name\": \"dataset_1\",\r\n                        \"table_presentation_name\": \"dataset_1\",\r\n                        \"table_schema_description\": null\r\n                    },\r\n                    \"storage\": {\r\n                        \"datasource\": {\r\n                            \"description\": null,\r\n                            \"name\": null,\r\n                            \"guid\": \"{{experimentSchema}}\",\r\n                            \"created_at\": null,\r\n                            \"deleted_at\": null,\r\n                            \"presentation_name\": null,\r\n                            \"system_datasource\": null,\r\n                            \"system_datasource_entity\": null\r\n                        },\r\n                        \"table_id\": null,\r\n                        \"table_name\": \"{{randomString}}\",\r\n                        \"table_presentation_name\": \"{{randomString}}\",\r\n                        \"table_schema_description\": null\r\n                    },\r\n                    \"version\": {\r\n                        \"version_id\": \"{{versionGuid}}\",\r\n                        \"version_number\": 1\r\n                    },\r\n                    \"etl_type\": \"ml_model\",\r\n                    \"storage_table_mode\": \"create\",\r\n                    \"response_timeout\": 3600000\r\n                },\r\n                \"base_task_guid\": null,\r\n                \"base_step_guid\": null\r\n            }\r\n        ],\r\n        \"transitions\": [\r\n            {\r\n                \"id\": \"66069875-b153-4e1d-86a6-6b9b7ef8bb18\",\r\n                \"type\": \"resolve\",\r\n                \"source\": {\r\n                    \"node_id\": \"cab0e621-82d4-4c1c-9cd6-40e0feb5ae61\",\r\n                    \"position\": \"right\"\r\n                },\r\n                \"destination\": {\r\n                    \"node_id\": \"85b896a2-b51c-404c-be18-4e3ad0db87cf\",\r\n                    \"position\": \"left\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"a66cf638-b492-42f5-a30d-7495a48840c4\",\r\n                \"type\": \"resolve\",\r\n                \"source\": {\r\n                    \"node_id\": \"85b896a2-b51c-404c-be18-4e3ad0db87cf\",\r\n                    \"position\": \"right\"\r\n                },\r\n                \"destination\": {\r\n                    \"node_id\": \"076f15a3-bf61-4b84-abc5-62eaf115839a\",\r\n                    \"position\": \"left\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-etl-middleware/api/etl-tasks",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-etl-middleware",
								"api",
								"etl-tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє ETL Р·Р°РґР°С‡Рё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// РЈСЃС‚Р°РЅРѕРІРєР° Р·Р°РґРµСЂР¶РєРё РЅР° 60 СЃРµРєСѓРЅРґ (60000 РјРёР»Р»РёСЃРµРєСѓРЅРґ)\r",
									"setTimeout(function() {\r",
									"}, 60000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-etl-middleware/api/etl-tasks/{{etlTaskGuid}}/start",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-etl-middleware",
								"api",
								"etl-tasks",
								"{{etlTaskGuid}}",
								"start"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџРѕР»СѓС‡РµРЅРёРµ СЃС‚Р°С‚СѓСЃР° СЌРєР·РµРјРїР»СЏСЂР° Р·Р°РґР°С‡Рё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"var statusValue = jsonData.content[0].status;\r",
									"\r",
									"pm.test(\"РџСЂРѕРІРµСЂРєР° СЃС‚Р°С‚СѓСЃР° ETL Р·Р°РґР°С‡Рё = Р—РђР’Р•Р РЁР•РќРђ\", function () {\r",
									"    pm.expect(statusValue).to.eql(\"completed\");\r",
									"});\r",
									"pm.collectionVariables.set(\"instanceStatus\", statusValue);\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-etl-middleware/api/etl-tasks/{{etlTaskGuid}}/instances?order=NEWEST_FIRST&page=0&page-size=1",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-etl-middleware",
								"api",
								"etl-tasks",
								"{{etlTaskGuid}}",
								"instances"
							],
							"query": [
								{
									"key": "order",
									"value": "NEWEST_FIRST"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "page-size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕР·РґР°РЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json();\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј tableName РёР· РєРѕР»Р»РµРєС†РёРё\r",
									"var tableName = pm.collectionVariables.get('tableName');\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].presentation_name === tableName) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Рѕ Р»Рё РЅР°Р№РґРµРЅРѕ СЃРѕРІРїР°РґРµРЅРёРµ\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ СЃРѕР·РґР°РЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ ETL Р·Р°РґР°С‡Рё",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical",
									"// @allure.label.epic=API",
									"// @allure.label.feature=E2E",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ",
									"",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {",
									"     pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-etl-middleware/api/etl-tasks/{{etlTaskGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-etl-middleware",
								"api",
								"etl-tasks",
								"{{etlTaskGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РР·РјРµРЅРµРЅРёРµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РІРµСЂСЃРёРё - РђСЂС…РёРІ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/versions/{{versionGuid}}?state=ARCHIVE",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"versions",
								"{{versionGuid}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ARCHIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ Р·Р°РїСѓСЃРєР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ РјРѕРґРµР»Рё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=E2E ETL-Р·Р°РґР°С‡Р° СЃ ML-РјРѕРґРµР»СЊСЋ\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments/{{experimentGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments",
								"{{experimentGuid}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to prod\n    \n10. Create ETL-task (with MLstep)\n    \n11. Delete a ETL-task\n    \n12. Delete a run\n    \n13. Delete a model\n    \n14. Delete an experiment"
		},
		{
			"name": "Scenario 4: 1million dataset",
			"item": [
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"         pm.response.to.have.status(201)\r",
									"     });\r",
									"\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #ef85ffa4;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#ef85ffa4;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ РјРѕРґРµР»Рё РІ СЌРєСЃРїРµСЂРёРјРµРЅС‚Рµ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"test_version_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"prod_version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РџСЂРµРїСЂРѕС†РµСЃСЃРёРЅРі\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"preprocessingGuid\", jsonData.guid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"schema\": \"{{schema}}\",\r\n    \"object_datasource\": \"{{objectDatasourceMillion}}\",\r\n    \"source_step\": null,\r\n    \"columns\": [\r\n        {\r\n            \"column_name\": \"target\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": true,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"ah_data\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"h_data\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        },\r\n        {\r\n            \"column_name\": \"t_data_1_1\",\r\n            \"column_type\": \"number\",\r\n            \"is_target\": false,\r\n            \"is_used\": true,\r\n            \"nan_count\": 0\r\n        }\r\n    ],\r\n    \"preprocessors\": [\r\n        {\r\n            \"column_name\": \"ah_data\",\r\n            \"preprocessor\": \"scale_processing\",\r\n            \"params\": {}\r\n        },\r\n        {\r\n            \"column_name\": \"h_data\",\r\n            \"preprocessor\": \"scale_processing\",\r\n            \"params\": {}\r\n        },\r\n        {\r\n            \"column_name\": \"t_data_1_1\",\r\n            \"preprocessor\": \"scale_processing\",\r\n            \"params\": {}\r\n        }\r\n    ],\r\n    \"strict_order\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/service-ml-middleware/api/steps/preprocessing",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"preprocessing"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РџР°СЂР°РјРµС‚СЂС‹ РјРѕРґРµР»Рё\" СЃ РєР»Р°СЃСЃРёС‡РµСЃРєРёРј Р°Р»РіРѕСЂРёС‚РјРѕРј",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PARAMETERS\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"parametersGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"name\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"learning_task_type\": \"classification\",\r\n    \"algorithm_type\": \"classic\",\r\n    \"classic_ml_algorithm\": \"random_forest_classifier\",\r\n    \"neuro_dl_algorithm\": null,\r\n    \"algorithm_params\": {\r\n        \"criterion\": \"gini\",\r\n        \"max_depth\": 55,\r\n        \"class_weight\": \"balanced\",\r\n        \"max_features\": 1.0,\r\n        \"n_estimators\": 300,\r\n        \"min_samples_leaf\": 4,\r\n        \"min_samples_split\": 4\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/parameters",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°РіР° \"РўСЂРµРЅРёСЂРѕРІРєР°\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"TRAINING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"new\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"trainingGuid\", jsonData.guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"presentation_name\": \"{{randomString}}\",\r\n    \"description\": \"{{randomString}}\",\r\n    \"model\": \"{{modelGuid}}\",\r\n    \"metrics\": [\r\n        \"accuracy\",\r\n        \"precision\",\r\n        \"recall\",\r\n        \"f1\",\r\n        \"roc_auc\",\r\n        \"confusion_matrix\",\r\n        \"roc\"\r\n    ],\r\n    \"loss\": null,\r\n    \"optimizer\": null,\r\n    \"scheduler\": null,\r\n    \"val_size\": 0.2,\r\n    \"learning_rate\": null,\r\n    \"n_epochs\": null,\r\n    \"train_batch_size\": null,\r\n    \"val_batch_size\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/steps/training",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"steps",
								"training"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЃРІСЏР·Рё 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{preprocessingGuid}}\",\r\n  \"type_first_step\": \"PREPROCESSING\",\r\n  \"second_step_id\": \"{{parametersGuid}}\",\r\n  \"type_second_step\": \"PARAMETERS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЃРІСЏР·Рё 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_step_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"second_step_id\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"model\": \"{{modelGuid}}\",\r\n  \"first_step_id\": \"{{parametersGuid}}\",\r\n  \"type_first_step\": \"PARAMETERS\",\r\n  \"second_step_id\": \"{{trainingGuid}}\",\r\n  \"type_second_step\": \"TRAINING\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/links",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџРѕР»СѓС‡РµРЅРёРµ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂР° Р·Р°РїСѓСЃРєР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"run_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"runGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/runs",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ Р·РЅР°С‡РµРЅРёСЏ\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"PREPROCESSING\");\r",
									"    pm.expect(jsonData.status).to.eql(\"running\")\r",
									"});\r",
									"\r",
									"console.log(\"Р—Р°РїСѓСЃРє РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°\")\r",
									"\r",
									"// РЈСЃС‚Р°РЅРѕРІРєР° Р·Р°РґРµСЂР¶РєРё РЅР° 480 СЃРµРєСѓРЅРґ (480000 РјРёР»Р»РёСЃРµРєСѓРЅРґ)\r",
									"setTimeout(function() {\r",
									"}, 480000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/preprocessing/{{preprocessingGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"preprocessing",
								"{{preprocessingGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р—Р°РїСѓСЃРє С‚СЂРµРЅРёСЂРѕРІРєРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"console.log(\"Р—Р°РїСѓСЃРє С‚СЂРµРЅРёСЂРѕРІРєРё\")\r",
									"\r",
									"// РЈСЃС‚Р°РЅРѕРІРєР° Р·Р°РґРµСЂР¶РєРё РЅР° 60 СЃРµРєСѓРЅРґ (60000 РјРёР»Р»РёСЃРµРєСѓРЅРґ)\r",
									"setTimeout(function() {\r",
									"}, 60000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}/training?description=РћРїРёСЃР°РЅРёРµ Р·Р°РїСѓСЃРєР° С‚РµСЃС‚",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}",
								"training"
							],
							"query": [
								{
									"key": "description",
									"value": "РћРїРёСЃР°РЅРёРµ Р·Р°РїСѓСЃРєР° С‚РµСЃС‚"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° СЃРѕР·РґР°РЅРёСЏ С‚Р°Р±Р»РёС†С‹ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє presentation_name РёР· РѕС‚РІРµС‚Р°\r",
									"var namesList = pm.response.json().map(item => item.presentation_name);\r",
									"\r",
									"// РЎРѕС…СЂР°РЅСЏРµРј С‚РµРєСѓС‰СѓСЋ РґР°С‚Сѓ, Р·Р°РґР°РµРј РёРјСЏ С‚Р°Р±Р»РёС†С‹, РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р° РґРѕР»Р¶РЅР° РёРјРµС‚СЊ РёРјСЏ РІ РІРёРґРµ tableName_currentDate\r",
									"var tableName = \"dataset\";\r",
									"\r",
									"var currentDay = new Date().toISOString().substring(8,10);\r",
									"var currentMonth = new Date().toISOString().substring(5,7);\r",
									"var currentYear = new Date().toISOString().substring(2,4);\r",
									"var currentHour = new Date()\r",
									"\r",
									"// РЎРјРµС‰РµРЅРёРµ РІ РјРёРЅСѓС‚Р°С… РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅРѕ UTC\r",
									"var timeZoneOffset = 3 * 60;\r",
									"currentHour.setMinutes(currentHour.getMinutes() + timeZoneOffset);\r",
									"// РџРѕР»СѓС‡Р°РµРј С‡Р°СЃ РІ РІС‹Р±СЂР°РЅРЅРѕР№ С‚Р°Р№РјР·РѕРЅРµ\r",
									"var currentHourInTimeZone = currentHour.toISOString().substring(11, 13);\r",
									"\r",
									"preprocessedDataset = tableName + \"_\" + currentDay + \"_\" + currentMonth + \"_\" + currentYear + \"_\" + currentHourInTimeZone\r",
									"console.log(preprocessedDataset)\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј РєР°Р¶РґС‹Р№ presentation_name РІ СЃРїРёСЃРєРµ\r",
									"var containsDataset = false;\r",
									"\r",
									"for (var i = 0; i < namesList.length; i++) {\r",
									"    if (namesList[i].includes(preprocessedDataset)) {\r",
									"        containsDataset = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р»Р° Р»Рё СЃРѕР·РґР°РЅР° РѕР±СЂР°Р±РѕС‚Р°РЅРЅР°СЏ С‚Р°Р±Р»РёС†Р°\r",
									"pm.test(\"РўР°Р±Р»РёС†Р° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРіР° СЃРѕР·РґР°РЅР°\", function () {\r",
									"    pm.expect(containsDataset).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Session",
								"value": "4474be29-a50f-4e9b-8d1f-7072cbc44d7d"
							}
						],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-datasources/api/schemas/{{experimentSchema}}/objects",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-datasources",
								"api",
								"schemas",
								"{{experimentSchema}}",
								"objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџРѕР»СѓС‡РµРЅРёРµ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂР° РІРµСЂСЃРёРё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"РўРµР»Рѕ РѕС‚РІРµС‚Р° СЃРѕРґРµСЂР¶РёС‚ РѕР¶РёРґР°РµРјС‹Рµ РєР»СЋС‡Рё\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"model\");\r",
									"    pm.expect(pm.response.text()).to.include(\"state\");\r",
									"    pm.expect(pm.response.text()).to.include(\"version_number\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"versionGuid\", jsonData[0].guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}/versions",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ Р·Р°РїСѓСЃРєР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/runs/{{runGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"runs",
								"{{runGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ РјРѕРґРµР»Рё",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/models/{{modelGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"models",
								"{{modelGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML РџСЂРµРІР°СЂРёС‚РµР»СЊРЅР°СЏ РѕР±СЂР°Р±РѕС‚РєР° Р±РѕР»СЊС€РѕРіРѕ РЅР°Р±РѕСЂР° РґР°РЅРЅС‹С…\r",
									"\r",
									"pm.test(\"РљРѕРґ СЃРѕСЃС‚РѕСЏРЅРёСЏ - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments/{{experimentGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments",
								"{{experimentGuid}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Check status=FINISHED\n    \n10. Delete a run\n    \n11. Delete a model\n    \n12. Delete an experiment"
		},
		{
			"name": "Scenario 5: Access groups",
			"item": [
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° С€Р°Р±Р»РѕРЅРѕРІ (Р±РµР· РіСЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"marked\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/access-groups/patterns",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"access-groups",
								"patterns"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° СЌРєСЃРїРµСЂРёРјРµРЅС‚РѕРІ (Р±РµР· РіСЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"marked\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/access-groups/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"access-groups",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ С€Р°Р±Р»РѕРЅР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"         pm.response.to.have.status(201)\r",
									"     });\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"pattern_type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"learning_task_type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"config\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"patternGuid\", jsonData.guid);\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #ef85ffa4;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#ef85ffa4;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"learning_task_type\": \"classification\",\r\n  \"config\": {\r\n        \"layer_0\": {\r\n            \"lstm\": {\r\n                \"bias\": true,\r\n                \"dropout\": 0,\r\n                \"proj_size\": 0,\r\n                \"input_size\": 29965,\r\n                \"num_layers\": 2,\r\n                \"batch_first\": false,\r\n                \"hidden_size\": 256,\r\n                \"bidirectional\": false\r\n            }\r\n        },\r\n        \"layer_1\": {\r\n            \"lazy_linear\": {\r\n                \"bias\": true,\r\n                \"out_features\": 32\r\n            }\r\n        },\r\n        \"layer_2\": {\r\n            \"flatten\": {\r\n                \"end_dim\": -1,\r\n                \"start_dim\": 1\r\n            }\r\n        },\r\n        \"layer_3\": {\r\n            \"lazy_linear\": {\r\n                \"bias\": true,\r\n                \"out_features\": 5\r\n            }\r\n        },\r\n        \"layer_4\": {\r\n            \"softmax\": {\r\n                \"dim\": -1\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/patterns",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"patterns"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"         pm.response.to.have.status(201)\r",
									"     });\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
									"\r",
									"\r",
									"//Vizualize response\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #ef85ffa4;border-collapse: collapse;}\r",
									"    .tftable th {font-size:14px;background-color:#ef85ffa4;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #ef85ffa4;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Description</th>\r",
									"        <th>GUID</th>\r",
									"        <th>Created</th>\r",
									"        <th>Updated</th>\r",
									"        <th>User GUID</th>\r",
									"        <th>Email</th>\r",
									"        <th>SSO ID</th>\r",
									"        <th>First Name</th>\r",
									"        <th>Last Name</th>\r",
									"        <th>Short Name</th>\r",
									"        <th>Schema</th>\r",
									"        <th>Presentation Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.description}}</td>\r",
									"        <td>{{response.guid}}</td>\r",
									"        <td>{{response.created}}</td>\r",
									"        <td>{{response.updated}}</td>\r",
									"        <td>{{response.user.guid}}</td>\r",
									"        <td>{{response.user.email}}</td>\r",
									"        <td>{{response.user.sso_id}}</td>\r",
									"        <td>{{response.user.first_name}}</td>\r",
									"        <td>{{response.user.last_name}}</td>\r",
									"        <td>{{response.user.short_name}}</td>\r",
									"        <td>{{response.schema}}</td>\r",
									"        <td>{{response.presentation_name}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЎРѕР·РґР°РЅРёРµ РіСЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"         pm.response.to.have.status(200)\r",
									"     });\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"realm_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\")\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"     pm.collectionVariables.set(\"accessGroupGuid\", jsonData.guid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-user/api/access-groups",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-user",
								"api",
								"access-groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р”РѕР±Р°РІР»РµРЅРёРµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РІ РіСЂСѓРїРїСѓ РґРѕСЃС‚СѓРїР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"added_objects_ids\");\r",
									"    pm.expect(pm.response.text()).to.include(\"removed_objects_ids\");\r",
									"});\r",
									"\r",
									"pm.test(\"Added_objects_ids contains userGuid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.added_objects_ids = pm.variables.get(\"userGuid\");\r",
									"    pm.expect(jsonData.added_objects_ids).to.eql(pm.variables.get(\"userGuid\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"objects\": [\r\n        \"{{userGuid}}\"\r\n    ],\r\n    \"guid\": \"{{accessGroupGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-user/api/access-groups/users",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-user",
								"api",
								"access-groups",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р”РѕР±Р°РІР»РµРЅРёРµ С€Р°Р±Р»РѕРЅР° РІ РіСЂСѓРїРїСѓ РґРѕСЃС‚СѓРїР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"objects\": [ \"{{patternGuid}}\"\r\n    ],\r\n    \"guid\": \"{{accessGroupGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/access-groups/patterns",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"access-groups",
								"patterns"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р”РѕР±Р°РІР»РµРЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р° РІ РіСЂСѓРїРїСѓ РґРѕСЃС‚СѓРїР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"objects\": [ \"{{experimentGuid}}\"\r\n    ],\r\n    \"guid\": \"{{accessGroupGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/access-groups/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"access-groups",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° С€Р°Р±Р»РѕРЅРѕРІ (РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ, РєРѕС‚РѕСЂС‹Р№ РґРѕР±Р°РІР»РµРЅ РІ РіСЂСѓРїРїСѓ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"learning_task_type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"});\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє guid РёР· РѕС‚РІРµС‚Р°\r",
									"var guidsList = pm.response.json().map(item => item.guid);\r",
									"\r",
									"// РџРµСЂРµРјРµРЅРЅР°СЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµР·СѓР»СЊС‚Р°С‚Р° РїСЂРѕРІРµСЂРєРё\r",
									"var isPatternGuidFound = false;\r",
									"var patternGuid = pm.collectionVariables.get(\"patternGuid\");\r",
									"\r",
									"// РџСЂРѕС…РѕРґРёРјСЃСЏ РїРѕ РєР°Р¶РґРѕРјСѓ guid РІ СЃРїРёСЃРєРµ\r",
									"for (var i = 0; i < guidsList.length; i++) {\r",
									"    if (guidsList[i] === patternGuid) {\r",
									"        isPatternGuidFound = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, РґРѕСЃС‚СѓРїРµРЅ Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕР·РґР°РЅРЅС‹Р№ С€Р°Р±Р»РѕРЅ\r",
									"pm.test(\"Created pattern is found\", function () {\r",
									"    pm.expect(isPatternGuidFound).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/patterns",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"patterns"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° СЌРєСЃРїРµСЂРёРјРµРЅС‚РѕРІ (РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ, РєРѕС‚РѕСЂС‹Р№ РґРѕР±Р°РІР»РµРЅ РІ РіСЂСѓРїРїСѓ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"});\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє guid РёР· РѕС‚РІРµС‚Р°\r",
									"var guidsList = pm.response.json().map(item => item.guid);\r",
									"\r",
									"// РџРµСЂРµРјРµРЅРЅР°СЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµР·СѓР»СЊС‚Р°С‚Р° РїСЂРѕРІРµСЂРєРё\r",
									"var isExperimentGuidFound = false;\r",
									"var experimentGuid = pm.collectionVariables.get(\"experimentGuid\");\r",
									"\r",
									"// РџСЂРѕС…РѕРґРёРјСЃСЏ РїРѕ РєР°Р¶РґРѕРјСѓ guid РІ СЃРїРёСЃРєРµ\r",
									"for (var i = 0; i < guidsList.length; i++) {\r",
									"    if (guidsList[i] === experimentGuid) {\r",
									"        isExperimentGuidFound = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, РґРѕСЃС‚СѓРїРµРЅ Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕР·РґР°РЅРЅС‹Р№ СЌРєСЃРїРµСЂРёРјРµРЅС‚\r",
									"pm.test(\"Created experiment is found\", function () {\r",
									"    pm.expect(isExperimentGuidFound).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° С€Р°Р±Р»РѕРЅРѕРІ (РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ, РЅРµ РІС…РѕРґСЏС‰РёР№ РІ РіСЂСѓРїРїСѓ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"learning_task_type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\")\r",
									"});\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє guid РёР· РѕС‚РІРµС‚Р°\r",
									"var guidsList = pm.response.json().map(item => item.guid);\r",
									"\r",
									"// РџРµСЂРµРјРµРЅРЅР°СЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµР·СѓР»СЊС‚Р°С‚Р° РїСЂРѕРІРµСЂРєРё\r",
									"var isPatternGuidFound = false;\r",
									"var patternGuid = pm.collectionVariables.get(\"patternGuid\");\r",
									"\r",
									"// РџСЂРѕС…РѕРґРёРјСЃСЏ РїРѕ РєР°Р¶РґРѕРјСѓ guid РІ СЃРїРёСЃРєРµ\r",
									"for (var i = 0; i < guidsList.length; i++) {\r",
									"    if (guidsList[i] === patternGuid) {\r",
									"        isPatternGuidFound = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, РґРѕСЃС‚СѓРїРµРЅ Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕР·РґР°РЅРЅС‹Р№ С€Р°Р±Р»РѕРЅ\r",
									"pm.test(\"Created pattern is not found\", function () {\r",
									"    pm.expect(isPatternGuidFound).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"http://bi-tst-01:8081/service-auth/auth/login\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify({\r",
									"        \"username\": \"kuzv\",\r",
									"        \"password\": \"asd\"\r",
									"    })\r",
									"},\r",
									"function (err, res) {\r",
									"    pm.environment.set(\"token\", res.json().access_token);\r",
									"    console.log(\"Autorization (user outside the access group) is done\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/patterns",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"patterns"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° СЌРєСЃРїРµСЂРёРјРµРЅС‚РѕРІ (РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ, РЅРµ РІС…РѕРґСЏС‰РёР№ РІ РіСЂСѓРїРїСѓ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"});\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє guid РёР· РѕС‚РІРµС‚Р°\r",
									"var guidsList = pm.response.json().map(item => item.guid);\r",
									"\r",
									"// РџРµСЂРµРјРµРЅРЅР°СЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµР·СѓР»СЊС‚Р°С‚Р° РїСЂРѕРІРµСЂРєРё\r",
									"var isExperimentGuidFound = false;\r",
									"var experimentGuid = pm.collectionVariables.get(\"experimentGuid\");\r",
									"\r",
									"// РџСЂРѕС…РѕРґРёРјСЃСЏ РїРѕ РєР°Р¶РґРѕРјСѓ guid РІ СЃРїРёСЃРєРµ\r",
									"for (var i = 0; i < guidsList.length; i++) {\r",
									"    if (guidsList[i] === experimentGuid) {\r",
									"        isExperimentGuidFound = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, РґРѕСЃС‚СѓРїРµРЅ Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕР·РґР°РЅРЅС‹Р№ С€Р°Р±Р»РѕРЅ\r",
									"pm.test(\"Created experiment is not found\", function () {\r",
									"    pm.expect(isExperimentGuidFound).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"http://bi-tst-01:8081/service-auth/auth/login\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify({\r",
									"        \"username\": \"kuzv\",\r",
									"        \"password\": \"asd\"\r",
									"    })\r",
									"},\r",
									"function (err, res) {\r",
									"    pm.environment.set(\"token\", res.json().access_token);\r",
									"    console.log(\"Autorization (user outside the access group) is done\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Р”РѕР±Р°РІР»РµРЅРёРµ РЅРѕРІРѕРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РІ РіСЂСѓРїРїСѓ РґРѕСЃС‚СѓРїР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"         pm.response.to.have.status(200)\r",
									"     });\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"added_objects_ids\");\r",
									"    pm.expect(pm.response.text()).to.include(\"removed_objects_ids\")\r",
									"});\r",
									"\r",
									"pm.test(\"Added_objects_ids contains secondUserGuid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.added_objects_ids = pm.variables.get(\"secondUserGuid\");\r",
									"    pm.expect(jsonData.added_objects_ids).to.eql(pm.variables.get(\"secondUserGuid\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"objects\": [\r\n    \"{{userGuid}}\",\r\n    \"{{secondUserGuid}}\"\r\n  ],\r\n  \"guid\": \"{{accessGroupGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-user/api/access-groups/users",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-user",
								"api",
								"access-groups",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° С€Р°Р±Р»РѕРЅРѕРІ (РЅРѕРІС‹Р№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ, РєРѕС‚РѕСЂС‹Р№ РґРѕР±Р°РІР»РµРЅ РІ РіСЂСѓРїРїСѓ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"learning_task_type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\")\r",
									"});\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє guid РёР· РѕС‚РІРµС‚Р°\r",
									"var guidsList = pm.response.json().map(item => item.guid);\r",
									"\r",
									"// РџРµСЂРµРјРµРЅРЅР°СЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµР·СѓР»СЊС‚Р°С‚Р° РїСЂРѕРІРµСЂРєРё\r",
									"var isPatternGuidFound = false;\r",
									"var patternGuid = pm.collectionVariables.get(\"patternGuid\");\r",
									"\r",
									"// РџСЂРѕС…РѕРґРёРјСЃСЏ РїРѕ РєР°Р¶РґРѕРјСѓ guid РІ СЃРїРёСЃРєРµ\r",
									"for (var i = 0; i < guidsList.length; i++) {\r",
									"    if (guidsList[i] === patternGuid) {\r",
									"        isPatternGuidFound = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, РґРѕСЃС‚СѓРїРµРЅ Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕР·РґР°РЅРЅС‹Р№ С€Р°Р±Р»РѕРЅ\r",
									"pm.test(\"Created pattern is found\", function () {\r",
									"    pm.expect(isPatternGuidFound).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"http://bi-tst-01:8081/service-auth/auth/login\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify({\r",
									"        \"username\": \"kuzv\",\r",
									"        \"password\": \"asd\"\r",
									"    })\r",
									"},\r",
									"function (err, res) {\r",
									"    pm.environment.set(\"token\", res.json().access_token);\r",
									"    console.log(\"Autorization (user outside the access group) is done\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/patterns",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"patterns"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° СЌРєСЃРїРµСЂРёРјРµРЅС‚РѕРІ (РЅРѕРІС‹Р№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ, РєРѕС‚РѕСЂС‹Р№ РґРѕР±Р°РІР»РµРЅ РІ РіСЂСѓРїРїСѓ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\");\r",
									"});\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє guid РёР· РѕС‚РІРµС‚Р°\r",
									"var guidsList = pm.response.json().map(item => item.guid);\r",
									"\r",
									"// РџРµСЂРµРјРµРЅРЅР°СЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµР·СѓР»СЊС‚Р°С‚Р° РїСЂРѕРІРµСЂРєРё\r",
									"var isExperimentGuidFound = false;\r",
									"var experimentGuid = pm.collectionVariables.get(\"experimentGuid\");\r",
									"\r",
									"// РџСЂРѕС…РѕРґРёРјСЃСЏ РїРѕ РєР°Р¶РґРѕРјСѓ guid РІ СЃРїРёСЃРєРµ\r",
									"for (var i = 0; i < guidsList.length; i++) {\r",
									"    if (guidsList[i] === experimentGuid) {\r",
									"        isExperimentGuidFound = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, РґРѕСЃС‚СѓРїРµРЅ Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕР·РґР°РЅРЅС‹Р№ СЌРєСЃРїРµСЂРёРјРµРЅС‚\r",
									"pm.test(\"Created experiment is found\", function () {\r",
									"    pm.expect(isExperimentGuidFound).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"http://bi-tst-01:8081/service-auth/auth/login\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify({\r",
									"        \"username\": \"kuzv\",\r",
									"        \"password\": \"asd\"\r",
									"    })\r",
									"},\r",
									"function (err, res) {\r",
									"    pm.environment.set(\"token\", res.json().access_token);\r",
									"    console.log(\"Autorization (user outside the access group) is done\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ РІС‚РѕСЂРѕРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РёР· РіСЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"         pm.response.to.have.status(200)\r",
									"     });\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"added_objects_ids\");\r",
									"    pm.expect(pm.response.text()).to.include(\"removed_objects_ids\")\r",
									"});\r",
									"\r",
									"pm.test(\"Removed_objects_ids contains secondUserGuid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.removed_objects_ids = pm.variables.get(\"secondUserGuid\");\r",
									"    pm.expect(jsonData.removed_objects_ids).to.eql(pm.variables.get(\"secondUserGuid\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"objects\": [\r\n        \"{{userGuid}}\"\r\n    ],\r\n    \"guid\": \"{{accessGroupGuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-user/api/access-groups/users",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-user",
								"api",
								"access-groups",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° С€Р°Р±Р»РѕРЅРѕРІ (РЅРѕРІС‹Р№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ, РєРѕС‚РѕСЂС‹Р№ СѓРґР°Р»РµРЅ РёР· РіСЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"learning_task_type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\")\r",
									"});\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє guid РёР· РѕС‚РІРµС‚Р°\r",
									"var guidsList = pm.response.json().map(item => item.guid);\r",
									"\r",
									"// РџРµСЂРµРјРµРЅРЅР°СЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµР·СѓР»СЊС‚Р°С‚Р° РїСЂРѕРІРµСЂРєРё\r",
									"var isPatternGuidFound = false;\r",
									"var patternGuid = pm.collectionVariables.get(\"patternGuid\");\r",
									"\r",
									"// РџСЂРѕС…РѕРґРёРјСЃСЏ РїРѕ РєР°Р¶РґРѕРјСѓ guid РІ СЃРїРёСЃРєРµ\r",
									"for (var i = 0; i < guidsList.length; i++) {\r",
									"    if (guidsList[i] === patternGuid) {\r",
									"        isPatternGuidFound = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, РґРѕСЃС‚СѓРїРµРЅ Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕР·РґР°РЅРЅС‹Р№ С€Р°Р±Р»РѕРЅ\r",
									"pm.test(\"Created pattern is not found\", function () {\r",
									"    pm.expect(isPatternGuidFound).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"http://bi-tst-01:8081/service-auth/auth/login\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify({\r",
									"        \"username\": \"kuzv\",\r",
									"        \"password\": \"asd\"\r",
									"    })\r",
									"},\r",
									"function (err, res) {\r",
									"    pm.environment.set(\"token\", res.json().access_token);\r",
									"    console.log(\"Autorization (user outside the access group) is done\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/patterns",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"patterns"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° СЌРєСЃРїРµСЂРёРјРµРЅС‚РѕРІ (РЅРѕРІС‹Р№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ, РєРѕС‚РѕСЂС‹Р№ СѓРґР°Р»РµРЅ РёР· РіСЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\")\r",
									"});\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє guid РёР· РѕС‚РІРµС‚Р°\r",
									"var guidsList = pm.response.json().map(item => item.guid);\r",
									"\r",
									"// РџРµСЂРµРјРµРЅРЅР°СЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµР·СѓР»СЊС‚Р°С‚Р° РїСЂРѕРІРµСЂРєРё\r",
									"var isExperimentGuidFound = false;\r",
									"var experimentGuid = pm.collectionVariables.get(\"experimentGuid\");\r",
									"\r",
									"// РџСЂРѕС…РѕРґРёРјСЃСЏ РїРѕ РєР°Р¶РґРѕРјСѓ guid РІ СЃРїРёСЃРєРµ\r",
									"for (var i = 0; i < guidsList.length; i++) {\r",
									"    if (guidsList[i] === experimentGuid) {\r",
									"        isExperimentGuidFound = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, РґРѕСЃС‚СѓРїРµРЅ Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕР·РґР°РЅРЅС‹Р№ С€Р°Р±Р»РѕРЅ\r",
									"pm.test(\"Created experiment is not found\", function () {\r",
									"    pm.expect(isExperimentGuidFound).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"http://bi-tst-01:8081/service-auth/auth/login\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify({\r",
									"        \"username\": \"kuzv\",\r",
									"        \"password\": \"asd\"\r",
									"    })\r",
									"},\r",
									"function (err, res) {\r",
									"    pm.environment.set(\"token\", res.json().access_token);\r",
									"    console.log(\"Autorization (user outside the access group) is done\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ РіСЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"         pm.response.to.have.status(200)\r",
									"     });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-user/api/access-groups/{{accessGroupGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-user",
								"api",
								"access-groups",
								"{{accessGroupGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° С€Р°Р±Р»РѕРЅРѕРІ (РїРѕСЃР»Рµ СѓРґР°Р»РµРЅРёСЏ РіСЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"learning_task_type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\")\r",
									"});\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє guid РёР· РѕС‚РІРµС‚Р°\r",
									"var guidsList = pm.response.json().map(item => item.guid);\r",
									"\r",
									"// РџРµСЂРµРјРµРЅРЅР°СЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµР·СѓР»СЊС‚Р°С‚Р° РїСЂРѕРІРµСЂРєРё\r",
									"var isPatternGuidFound = false;\r",
									"var patternGuid = pm.collectionVariables.get(\"patternGuid\");\r",
									"\r",
									"// РџСЂРѕС…РѕРґРёРјСЃСЏ РїРѕ РєР°Р¶РґРѕРјСѓ guid РІ СЃРїРёСЃРєРµ\r",
									"for (var i = 0; i < guidsList.length; i++) {\r",
									"    if (guidsList[i] === patternGuid) {\r",
									"        isPatternGuidFound = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, РґРѕСЃС‚СѓРїРµРЅ Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕР·РґР°РЅРЅС‹Р№ С€Р°Р±Р»РѕРЅ\r",
									"pm.test(\"Created pattern is not found\", function () {\r",
									"    pm.expect(isPatternGuidFound).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"http://bi-tst-01:8081/service-auth/auth/login\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify({\r",
									"        \"username\": \"kuzv\",\r",
									"        \"password\": \"asd\"\r",
									"    })\r",
									"},\r",
									"function (err, res) {\r",
									"    pm.environment.set(\"token\", res.json().access_token);\r",
									"    console.log(\"Autorization (user outside the access group) is done\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/patterns",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"patterns"
							]
						}
					},
					"response": []
				},
				{
					"name": "РџСЂРѕРІРµСЂРєР° РїРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° СЌРєСЃРїРµСЂРёРјРµРЅС‚РѕРІ (РїРѕСЃР»Рµ СѓРґР°Р»РµРЅРёСЏ РіСЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"schema\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"presentation_name\")\r",
									"});\r",
									"\r",
									"// РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє guid РёР· РѕС‚РІРµС‚Р°\r",
									"var guidsList = pm.response.json().map(item => item.guid);\r",
									"\r",
									"// РџРµСЂРµРјРµРЅРЅР°СЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµР·СѓР»СЊС‚Р°С‚Р° РїСЂРѕРІРµСЂРєРё\r",
									"var isExperimentGuidFound = false;\r",
									"var experimentGuid = pm.collectionVariables.get(\"experimentGuid\");\r",
									"\r",
									"// РџСЂРѕС…РѕРґРёРјСЃСЏ РїРѕ РєР°Р¶РґРѕРјСѓ guid РІ СЃРїРёСЃРєРµ\r",
									"for (var i = 0; i < guidsList.length; i++) {\r",
									"    if (guidsList[i] === experimentGuid) {\r",
									"        isExperimentGuidFound = true;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// РџСЂРѕРІРµСЂСЏРµРј, РґРѕСЃС‚СѓРїРµРЅ Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕР·РґР°РЅРЅС‹Р№ С€Р°Р±Р»РѕРЅ\r",
									"pm.test(\"Created experiment is not found\", function () {\r",
									"    pm.expect(isExperimentGuidFound).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"http://bi-tst-01:8081/service-auth/auth/login\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: JSON.stringify({\r",
									"        \"username\": \"kuzv\",\r",
									"        \"password\": \"asd\"\r",
									"    })\r",
									"},\r",
									"function (err, res) {\r",
									"    pm.environment.set(\"token\", res.json().access_token);\r",
									"    console.log(\"Autorization (user outside the access group) is done\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ С€Р°Р±Р»РѕРЅР°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"         pm.response.to.have.status(200)\r",
									"     });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/patterns/{{patternGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"patterns",
								"{{patternGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "РЈРґР°Р»РµРЅРёРµ СЌРєСЃРїРµСЂРёРјРµРЅС‚Р°",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.severity=critical\r",
									"// @allure.label.epic=API\r",
									"// @allure.label.feature=E2E\r",
									"// @allure.label.story=ML Р“СЂСѓРїРїС‹ РґРѕСЃС‚СѓРїР°\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{GATEWAY_URL}}/service-ml-middleware/api/experiments/{{experimentGuid}}",
							"protocol": "http",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"service-ml-middleware",
								"api",
								"experiments",
								"{{experimentGuid}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РЅР°РёРјРµРЅРѕРІР°РЅРёР№",
					"function randomString(length = 1) {",
					"    let result = \"\";",
					"    const characters = \"abcdefghijklmnopqrstuvwxyz\";",
					"    const charactersLength = characters.length;",
					"    for (let i = 0; i < length; i++) {",
					"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"    }",
					"    return result;",
					"}",
					"",
					"const STRING_LEN = 10;",
					"pm.variables.set('randomString', randomString(STRING_LEN));",
					"",
					"// РђРІС‚РѕСЂРёР·Р°С†РёСЏ, РїРѕР»СѓС‡РµРЅРёРµ С‚РѕРєРµРЅР° Рё РґРѕР±Р°РІР»РµРЅРёРµ realm_guid РІ headers",
					"pm.request.headers.add({",
					"key: 'Realm_guid',",
					"value: 'eccfb99c-7a0e-45fe-bce0-a7ba31f2c99c'",
					"});",
					"",
					"pm.sendRequest({",
					"    url: \"http://bi-tst-01:8081/service-auth/auth/login\",",
					"    method: \"POST\",",
					"    header: {",
					"        \"Content-Type\": \"application/json\"",
					"    },",
					"    body: JSON.stringify({",
					"        \"username\": \"nikia\",",
					"        \"password\": \"wer\"",
					"    })",
					"},",
					"function (err, res) {",
					"    pm.environment.set(\"token\", res.json().access_token);",
					"    console.log(\"Autorization is done\")",
					"})"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "schema",
			"value": "e990d139-ed8c-4dea-aaf5-57b504b1b109"
		},
		{
			"key": "objectDatasource",
			"value": "ce278ca4-da46-44ac-a540-cd3ed4e2a6bf"
		},
		{
			"key": "objectDatasourcePredict",
			"value": "f22019f8-c298-400f-8a61-38fe185aa401"
		},
		{
			"key": "experimentSchema",
			"value": "1f6e4c39-c8fa-4195-a097-06f8adab8995"
		},
		{
			"key": "objectDatasourceMillion",
			"value": "703eec54-ee3a-4241-ac71-d468aa57f235"
		},
		{
			"key": "experimentGuid",
			"value": ""
		},
		{
			"key": "modelGuid",
			"value": ""
		},
		{
			"key": "preprocessingGuid",
			"value": ""
		},
		{
			"key": "parametersGuid",
			"value": ""
		},
		{
			"key": "trainingGuid",
			"value": ""
		},
		{
			"key": "runGuid",
			"value": ""
		},
		{
			"key": "versionGuid",
			"value": ""
		},
		{
			"key": "etlTaskGuid",
			"value": ""
		},
		{
			"key": "instanceStatus",
			"value": ""
		},
		{
			"key": "patternGuid",
			"value": ""
		},
		{
			"key": "accessGroupGuid",
			"value": ""
		},
		{
			"key": "userGuid",
			"value": "7d6f5df4-6916-4cbb-9c85-e4ee06b7875b"
		},
		{
			"key": "secondUserGuid",
			"value": "a91437a2-5683-404e-93a7-3147d2465cdc"
		},
		{
			"key": "tableName",
			"value": ""
		}
	]
}