{
  "collection": {
    "_": {
      "postman_id": "75b1aeb6-97c8-4581-84d9-c27b9e0a298e",
      "exporter_id": "30928254"
    },
    "item": [
      {
        "id": "946d34b3-f3ee-426f-a400-fdd1625a2ff5",
        "name": "Scenario 2: End-to-end (DL) Copy",
        "description": {
          "content": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
            "name": "Create experiment",
            "request": {
              "url": {
                "protocol": "http",
                "path": [
                  "service-ml-middleware",
                  "api",
                  "experiments"
                ],
                "host": [
                  "{{GATEWAY_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {\r",
                    "         pm.response.to.have.status(201)\r",
                    "     });\r",
                    "\r",
                    "pm.test(\"Body contains string\", function () {\r",
                    "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                    "});\r",
                    "\r",
                    "var jsonData = pm.response.json();\r",
                    "     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
                    "\r",
                    "\r",
                    "//Vizualize response\r",
                    "var template = `\r",
                    "<style type=\"text/css\">\r",
                    "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                    "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                    "    .tftable tr {background-color:#ffffff;}\r",
                    "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                    "    .tftable tr:hover {background-color:#e0ffff;}\r",
                    "</style>\r",
                    "\r",
                    "<table class=\"tftable\" border=\"1\">\r",
                    "    <tr>\r",
                    "        <th>Description</th>\r",
                    "        <th>GUID</th>\r",
                    "        <th>Created</th>\r",
                    "        <th>Updated</th>\r",
                    "        <th>User GUID</th>\r",
                    "        <th>Email</th>\r",
                    "        <th>SSO ID</th>\r",
                    "        <th>First Name</th>\r",
                    "        <th>Last Name</th>\r",
                    "        <th>Short Name</th>\r",
                    "        <th>Schema</th>\r",
                    "        <th>Presentation Name</th>\r",
                    "    </tr>\r",
                    "    <tr>\r",
                    "        <td>{{response.description}}</td>\r",
                    "        <td>{{response.guid}}</td>\r",
                    "        <td>{{response.created}}</td>\r",
                    "        <td>{{response.updated}}</td>\r",
                    "        <td>{{response.user.guid}}</td>\r",
                    "        <td>{{response.user.email}}</td>\r",
                    "        <td>{{response.user.sso_id}}</td>\r",
                    "        <td>{{response.user.first_name}}</td>\r",
                    "        <td>{{response.user.last_name}}</td>\r",
                    "        <td>{{response.user.short_name}}</td>\r",
                    "        <td>{{response.schema}}</td>\r",
                    "        <td>{{response.presentation_name}}</td>\r",
                    "    </tr>\r",
                    "</table>\r",
                    "`;\r",
                    "\r",
                    "function constructVisualizerPayload() {\r",
                    "    return { response: pm.response.json() }\r",
                    "}\r",
                    "\r",
                    "pm.visualizer.set(template, constructVisualizerPayload());\r",
                    ""
                  ],
                  "_lastExecutionId": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "8cc7a4a6-4872-42ae-85d2-140683bc9665",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd734bec-9bb4-4183-98af-0c40dc466357"
                }
              }
            ]
          },
          {
            "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
            "name": "Create model in experiment",
            "request": {
              "url": {
                "protocol": "http",
                "path": [
                  "service-ml-middleware",
                  "api",
                  "models"
                ],
                "host": [
                  "{{GATEWAY_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "712064a3-ece0-4086-818e-d56529096656",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {\r",
                    "    pm.response.to.have.status(201);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Body contains string\", function () {\r",
                    "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                    "});\r",
                    "\r",
                    "var jsonData = pm.response.json();\r",
                    "     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
                    "\r",
                    "\r",
                    "//Vizualize response\r",
                    "var template = `\r",
                    "<style type=\"text/css\">\r",
                    "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                    "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                    "    .tftable tr {background-color:#ffffff;}\r",
                    "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                    "    .tftable tr:hover {background-color:#e0ffff;}\r",
                    "</style>\r",
                    "\r",
                    "<table class=\"tftable\" border=\"1\">\r",
                    "    <tr>\r",
                    "        <th>Description</th>\r",
                    "        <th>GUID</th>\r",
                    "        <th>Created</th>\r",
                    "        <th>Updated</th>\r",
                    "        <th>User GUID</th>\r",
                    "        <th>Email</th>\r",
                    "        <th>SSO ID</th>\r",
                    "        <th>First Name</th>\r",
                    "        <th>Last Name</th>\r",
                    "        <th>Short Name</th>\r",
                    "        <th>Schema</th>\r",
                    "        <th>Presentation Name</th>\r",
                    "    </tr>\r",
                    "    <tr>\r",
                    "        <td>{{response.description}}</td>\r",
                    "        <td>{{response.guid}}</td>\r",
                    "        <td>{{response.created}}</td>\r",
                    "        <td>{{response.updated}}</td>\r",
                    "        <td>{{response.user.guid}}</td>\r",
                    "        <td>{{response.user.email}}</td>\r",
                    "        <td>{{response.user.sso_id}}</td>\r",
                    "        <td>{{response.user.first_name}}</td>\r",
                    "        <td>{{response.user.last_name}}</td>\r",
                    "        <td>{{response.user.short_name}}</td>\r",
                    "        <td>{{response.schema}}</td>\r",
                    "        <td>{{response.presentation_name}}</td>\r",
                    "    </tr>\r",
                    "</table>\r",
                    "`;\r",
                    "\r",
                    "function constructVisualizerPayload() {\r",
                    "    return { response: pm.response.json() }\r",
                    "}\r",
                    "\r",
                    "pm.visualizer.set(template, constructVisualizerPayload());"
                  ],
                  "_lastExecutionId": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
                }
              }
            ]
          },
          {
            "id": "5d65e3c2-2080-4991-8ce7-ccec0e64086a",
            "name": "Delete model",
            "request": {
              "url": {
                "protocol": "http",
                "path": [
                  "service-ml-middleware",
                  "api",
                  "models",
                  "{{modelGuid}}"
                ],
                "host": [
                  "{{GATEWAY_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f174d403-3e38-4eda-8bfe-276d2ecd79bf",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});"
                  ],
                  "_lastExecutionId": "f268397a-c86e-4f00-add9-8a650942649d"
                }
              }
            ]
          },
          {
            "id": "5ee05fd4-05ae-40f7-af7d-7d4049688e3c",
            "name": "Delete experiment",
            "request": {
              "url": {
                "protocol": "http",
                "path": [
                  "service-ml-middleware",
                  "api",
                  "experiments",
                  "{{experimentGuid}}"
                ],
                "host": [
                  "{{GATEWAY_URL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0abced1a-d66d-4eee-82b5-c49e36114b86",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});"
                  ],
                  "_lastExecutionId": "34c6ec0c-914c-434d-b15a-93546e6228c9"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "75b1aeb6-97c8-4581-84d9-c27b9e0a298e",
      "name": "New Collection",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2024-06-24T14:39:20.787Z",
      "postman_exported_using": "Postman/11.2.13"
    },
    "id": "7a235d7a-5d10-48b1-9c3c-ed2ec86fb75b",
    "name": "test-stand/ml",
    "values": [
      {
        "type": "any",
        "value": "bi-tst-01:8081",
        "key": "GATEWAY_URL"
      },
      {
        "type": "any",
        "value": "",
        "key": "token"
      }
    ]
  },
  "globals": {
    "id": "45a67a4b-007a-46fc-96f8-62c720cef631",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 6,
        "pending": 0,
        "failed": 6
      },
      "testScripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.25,
      "responseMin": 18,
      "responseMax": 161,
      "responseSd": 60.1721488730459,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719261041995,
      "completed": 1719261046736
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 4,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "63c6e946-4108-4c20-9325-71434d2c7b80",
          "httpRequestId": "5b4d16e7-e19f-4357-ab66-6aac725718b9"
        },
        "item": {
          "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
          "name": "Create experiment",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "service-ml-middleware",
                "api",
                "experiments"
              ],
              "host": [
                "{{GATEWAY_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "         pm.response.to.have.status(201)\r",
                  "     });\r",
                  "\r",
                  "pm.test(\"Body contains string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
                  "\r",
                  "\r",
                  "//Vizualize response\r",
                  "var template = `\r",
                  "<style type=\"text/css\">\r",
                  "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                  "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                  "    .tftable tr {background-color:#ffffff;}\r",
                  "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                  "    .tftable tr:hover {background-color:#e0ffff;}\r",
                  "</style>\r",
                  "\r",
                  "<table class=\"tftable\" border=\"1\">\r",
                  "    <tr>\r",
                  "        <th>Description</th>\r",
                  "        <th>GUID</th>\r",
                  "        <th>Created</th>\r",
                  "        <th>Updated</th>\r",
                  "        <th>User GUID</th>\r",
                  "        <th>Email</th>\r",
                  "        <th>SSO ID</th>\r",
                  "        <th>First Name</th>\r",
                  "        <th>Last Name</th>\r",
                  "        <th>Short Name</th>\r",
                  "        <th>Schema</th>\r",
                  "        <th>Presentation Name</th>\r",
                  "    </tr>\r",
                  "    <tr>\r",
                  "        <td>{{response.description}}</td>\r",
                  "        <td>{{response.guid}}</td>\r",
                  "        <td>{{response.created}}</td>\r",
                  "        <td>{{response.updated}}</td>\r",
                  "        <td>{{response.user.guid}}</td>\r",
                  "        <td>{{response.user.email}}</td>\r",
                  "        <td>{{response.user.sso_id}}</td>\r",
                  "        <td>{{response.user.first_name}}</td>\r",
                  "        <td>{{response.user.last_name}}</td>\r",
                  "        <td>{{response.user.short_name}}</td>\r",
                  "        <td>{{response.schema}}</td>\r",
                  "        <td>{{response.presentation_name}}</td>\r",
                  "    </tr>\r",
                  "</table>\r",
                  "`;\r",
                  "\r",
                  "function constructVisualizerPayload() {\r",
                  "    return { response: pm.response.json() }\r",
                  "}\r",
                  "\r",
                  "pm.visualizer.set(template, constructVisualizerPayload());\r",
                  ""
                ],
                "_lastExecutionId": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8cc7a4a6-4872-42ae-85d2-140683bc9665",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "cd734bec-9bb4-4183-98af-0c40dc466357"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8081",
            "path": [
              "service-ml-middleware",
              "api",
              "experiments"
            ],
            "host": [
              "bi-tst-01"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cb23ca51-ad1c-4730-a7b1-ff1f173adfad",
              "system": true
            },
            {
              "key": "Host",
              "value": "bi-tst-01:8081",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "128",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "bebc1b1c-9dd7-420b-9bf1-9d730777c981",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "transfer-encoding",
              "value": "chunked"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Mon, 24 Jun 2024 20:30:43 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              54,
              45,
              50,
              52,
              84,
              50,
              48,
              58,
              51,
              48,
              58,
              52,
              51,
              46,
              55,
              57,
              57,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              45,
              109,
              108,
              45,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              97,
              112,
              105,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              85,
              78,
              65,
              85,
              84,
              72,
              79,
              82,
              73,
              90,
              69,
              68,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              95,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              70,
              117,
              108,
              108,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              105,
              115,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 161,
          "responseSize": 203
        },
        "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Body contains string",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Body contains string",
              "message": "expected '{\"timestamp\":\"2024-06-24T20:30:43.799…' to include 'guid'",
              "stack": "AssertionError: expected '{\"timestamp\":\"2024-06-24T20:30:43.799…' to include 'guid'\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9df3f56d-2a3e-42e4-bef2-0a133870f932",
          "length": 4,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "89632eb3-3b63-45e8-99c9-9225d0b15b38"
        },
        "item": {
          "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
          "name": "Create model in experiment",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "service-ml-middleware",
                "api",
                "models"
              ],
              "host": [
                "{{GATEWAY_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "712064a3-ece0-4086-818e-d56529096656",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body contains string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
                  "\r",
                  "\r",
                  "//Vizualize response\r",
                  "var template = `\r",
                  "<style type=\"text/css\">\r",
                  "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                  "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                  "    .tftable tr {background-color:#ffffff;}\r",
                  "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                  "    .tftable tr:hover {background-color:#e0ffff;}\r",
                  "</style>\r",
                  "\r",
                  "<table class=\"tftable\" border=\"1\">\r",
                  "    <tr>\r",
                  "        <th>Description</th>\r",
                  "        <th>GUID</th>\r",
                  "        <th>Created</th>\r",
                  "        <th>Updated</th>\r",
                  "        <th>User GUID</th>\r",
                  "        <th>Email</th>\r",
                  "        <th>SSO ID</th>\r",
                  "        <th>First Name</th>\r",
                  "        <th>Last Name</th>\r",
                  "        <th>Short Name</th>\r",
                  "        <th>Schema</th>\r",
                  "        <th>Presentation Name</th>\r",
                  "    </tr>\r",
                  "    <tr>\r",
                  "        <td>{{response.description}}</td>\r",
                  "        <td>{{response.guid}}</td>\r",
                  "        <td>{{response.created}}</td>\r",
                  "        <td>{{response.updated}}</td>\r",
                  "        <td>{{response.user.guid}}</td>\r",
                  "        <td>{{response.user.email}}</td>\r",
                  "        <td>{{response.user.sso_id}}</td>\r",
                  "        <td>{{response.user.first_name}}</td>\r",
                  "        <td>{{response.user.last_name}}</td>\r",
                  "        <td>{{response.user.short_name}}</td>\r",
                  "        <td>{{response.schema}}</td>\r",
                  "        <td>{{response.presentation_name}}</td>\r",
                  "    </tr>\r",
                  "</table>\r",
                  "`;\r",
                  "\r",
                  "function constructVisualizerPayload() {\r",
                  "    return { response: pm.response.json() }\r",
                  "}\r",
                  "\r",
                  "pm.visualizer.set(template, constructVisualizerPayload());"
                ],
                "_lastExecutionId": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8081",
            "path": [
              "service-ml-middleware",
              "api",
              "models"
            ],
            "host": [
              "bi-tst-01"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2799641a-30e5-4d45-be97-8f31f08f7ea4",
              "system": true
            },
            {
              "key": "Host",
              "value": "bi-tst-01:8081",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "113",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"null\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "b9f403e4-f2d9-4bc1-a47b-98a83909e503",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "transfer-encoding",
              "value": "chunked"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Mon, 24 Jun 2024 20:30:44 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              54,
              45,
              50,
              52,
              84,
              50,
              48,
              58,
              51,
              48,
              58,
              52,
              52,
              46,
              57,
              55,
              54,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              45,
              109,
              108,
              45,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              97,
              112,
              105,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              34,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              85,
              78,
              65,
              85,
              84,
              72,
              79,
              82,
              73,
              90,
              69,
              68,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              95,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              70,
              117,
              108,
              108,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              105,
              115,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 32,
          "responseSize": 198
        },
        "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Body contains string",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Body contains string",
              "message": "expected '{\"timestamp\":\"2024-06-24T20:30:44.976…' to include 'guid'",
              "stack": "AssertionError: expected '{\"timestamp\":\"2024-06-24T20:30:44.976…' to include 'guid'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c69057df-423b-4c05-8d02-71af499cdf73",
          "length": 4,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "af28afaa-86e3-43d1-ab88-7eb56b95608e"
        },
        "item": {
          "id": "5d65e3c2-2080-4991-8ce7-ccec0e64086a",
          "name": "Delete model",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "service-ml-middleware",
                "api",
                "models",
                "{{modelGuid}}"
              ],
              "host": [
                "{{GATEWAY_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f174d403-3e38-4eda-8bfe-276d2ecd79bf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "f268397a-c86e-4f00-add9-8a650942649d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8081",
            "path": [
              "service-ml-middleware",
              "api",
              "models",
              "null"
            ],
            "host": [
              "bi-tst-01"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "34abd5f4-22e1-4b99-b829-adbf7e3a3ede",
              "system": true
            },
            {
              "key": "Host",
              "value": "bi-tst-01:8081",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "218cbf07-355f-431f-b979-b06299fa7c26",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "transfer-encoding",
              "value": "chunked"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Mon, 24 Jun 2024 20:30:46 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              54,
              45,
              50,
              52,
              84,
              50,
              48,
              58,
              51,
              48,
              58,
              52,
              54,
              46,
              49,
              51,
              53,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              45,
              109,
              108,
              45,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              97,
              112,
              105,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              110,
              117,
              108,
              108,
              34,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              85,
              78,
              65,
              85,
              84,
              72,
              79,
              82,
              73,
              90,
              69,
              68,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              95,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              70,
              117,
              108,
              108,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              105,
              115,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 203
        },
        "id": "5d65e3c2-2080-4991-8ce7-ccec0e64086a",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f206afce-3063-49f6-9c2e-93e63d1f3d90",
          "length": 4,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a08721c8-3c43-4589-a260-5693c48d0e94"
        },
        "item": {
          "id": "5ee05fd4-05ae-40f7-af7d-7d4049688e3c",
          "name": "Delete experiment",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "service-ml-middleware",
                "api",
                "experiments",
                "{{experimentGuid}}"
              ],
              "host": [
                "{{GATEWAY_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0abced1a-d66d-4eee-82b5-c49e36114b86",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "34c6ec0c-914c-434d-b15a-93546e6228c9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8081",
            "path": [
              "service-ml-middleware",
              "api",
              "experiments",
              "null"
            ],
            "host": [
              "bi-tst-01"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9dfd7806-f22c-4746-ab0c-b3c26037eeef",
              "system": true
            },
            {
              "key": "Host",
              "value": "bi-tst-01:8081",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "6f1b9e54-9fc8-4c80-9705-894baff88668",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "transfer-encoding",
              "value": "chunked"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Mon, 24 Jun 2024 20:30:47 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              54,
              45,
              50,
              52,
              84,
              50,
              48,
              58,
              51,
              48,
              58,
              52,
              55,
              46,
              50,
              55,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              45,
              109,
              108,
              45,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              97,
              112,
              105,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              110,
              117,
              108,
              108,
              34,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              85,
              78,
              65,
              85,
              84,
              72,
              79,
              82,
              73,
              90,
              69,
              68,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              95,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              70,
              117,
              108,
              108,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              105,
              115,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 208
        },
        "id": "5ee05fd4-05ae-40f7-af7d-7d4049688e3c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 812
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 401",
          "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "cb3d49149985bb3e7ff3ea5855bf3559",
          "id": "3732094a-e690-4e76-bb5f-4990e15c2530",
          "timestamp": 1719261043260,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
          "name": "Create experiment",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "service-ml-middleware",
                "api",
                "experiments"
              ],
              "host": [
                "{{GATEWAY_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "         pm.response.to.have.status(201)\r",
                  "     });\r",
                  "\r",
                  "pm.test(\"Body contains string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
                  "\r",
                  "\r",
                  "//Vizualize response\r",
                  "var template = `\r",
                  "<style type=\"text/css\">\r",
                  "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                  "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                  "    .tftable tr {background-color:#ffffff;}\r",
                  "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                  "    .tftable tr:hover {background-color:#e0ffff;}\r",
                  "</style>\r",
                  "\r",
                  "<table class=\"tftable\" border=\"1\">\r",
                  "    <tr>\r",
                  "        <th>Description</th>\r",
                  "        <th>GUID</th>\r",
                  "        <th>Created</th>\r",
                  "        <th>Updated</th>\r",
                  "        <th>User GUID</th>\r",
                  "        <th>Email</th>\r",
                  "        <th>SSO ID</th>\r",
                  "        <th>First Name</th>\r",
                  "        <th>Last Name</th>\r",
                  "        <th>Short Name</th>\r",
                  "        <th>Schema</th>\r",
                  "        <th>Presentation Name</th>\r",
                  "    </tr>\r",
                  "    <tr>\r",
                  "        <td>{{response.description}}</td>\r",
                  "        <td>{{response.guid}}</td>\r",
                  "        <td>{{response.created}}</td>\r",
                  "        <td>{{response.updated}}</td>\r",
                  "        <td>{{response.user.guid}}</td>\r",
                  "        <td>{{response.user.email}}</td>\r",
                  "        <td>{{response.user.sso_id}}</td>\r",
                  "        <td>{{response.user.first_name}}</td>\r",
                  "        <td>{{response.user.last_name}}</td>\r",
                  "        <td>{{response.user.short_name}}</td>\r",
                  "        <td>{{response.schema}}</td>\r",
                  "        <td>{{response.presentation_name}}</td>\r",
                  "    </tr>\r",
                  "</table>\r",
                  "`;\r",
                  "\r",
                  "function constructVisualizerPayload() {\r",
                  "    return { response: pm.response.json() }\r",
                  "}\r",
                  "\r",
                  "pm.visualizer.set(template, constructVisualizerPayload());\r",
                  ""
                ],
                "_lastExecutionId": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8cc7a4a6-4872-42ae-85d2-140683bc9665",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "cd734bec-9bb4-4183-98af-0c40dc466357"
              }
            }
          ]
        },
        "parent": {
          "id": "946d34b3-f3ee-426f-a400-fdd1625a2ff5",
          "name": "Scenario 2: End-to-end (DL) Copy",
          "description": {
            "content": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
              "name": "Create experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "         pm.response.to.have.status(201)\r",
                      "     });\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());\r",
                      ""
                    ],
                    "_lastExecutionId": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8cc7a4a6-4872-42ae-85d2-140683bc9665",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "cd734bec-9bb4-4183-98af-0c40dc466357"
                  }
                }
              ]
            },
            {
              "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
              "name": "Create model in experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712064a3-ece0-4086-818e-d56529096656",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());"
                    ],
                    "_lastExecutionId": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
                  }
                }
              ]
            },
            {
              "id": "5d65e3c2-2080-4991-8ce7-ccec0e64086a",
              "name": "Delete model",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models",
                    "{{modelGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f174d403-3e38-4eda-8bfe-276d2ecd79bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "f268397a-c86e-4f00-add9-8a650942649d"
                  }
                }
              ]
            },
            {
              "id": "5ee05fd4-05ae-40f7-af7d-7d4049688e3c",
              "name": "Delete experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments",
                    "{{experimentGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0abced1a-d66d-4eee-82b5-c49e36114b86",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "34c6ec0c-914c-434d-b15a-93546e6228c9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 4,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "63c6e946-4108-4c20-9325-71434d2c7b80",
          "httpRequestId": "5b4d16e7-e19f-4357-ab66-6aac725718b9",
          "scriptId": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
          "execution": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Body contains string",
          "message": "expected '{\"timestamp\":\"2024-06-24T20:30:43.799…' to include 'guid'",
          "stack": "AssertionError: expected '{\"timestamp\":\"2024-06-24T20:30:43.799…' to include 'guid'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "f58cf9cee24599ae62661744f09e3b64",
          "id": "7d841747-23dd-4cdb-9a9f-8956ca970dd3",
          "timestamp": 1719261043263,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
          "name": "Create experiment",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "service-ml-middleware",
                "api",
                "experiments"
              ],
              "host": [
                "{{GATEWAY_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "         pm.response.to.have.status(201)\r",
                  "     });\r",
                  "\r",
                  "pm.test(\"Body contains string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
                  "\r",
                  "\r",
                  "//Vizualize response\r",
                  "var template = `\r",
                  "<style type=\"text/css\">\r",
                  "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                  "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                  "    .tftable tr {background-color:#ffffff;}\r",
                  "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                  "    .tftable tr:hover {background-color:#e0ffff;}\r",
                  "</style>\r",
                  "\r",
                  "<table class=\"tftable\" border=\"1\">\r",
                  "    <tr>\r",
                  "        <th>Description</th>\r",
                  "        <th>GUID</th>\r",
                  "        <th>Created</th>\r",
                  "        <th>Updated</th>\r",
                  "        <th>User GUID</th>\r",
                  "        <th>Email</th>\r",
                  "        <th>SSO ID</th>\r",
                  "        <th>First Name</th>\r",
                  "        <th>Last Name</th>\r",
                  "        <th>Short Name</th>\r",
                  "        <th>Schema</th>\r",
                  "        <th>Presentation Name</th>\r",
                  "    </tr>\r",
                  "    <tr>\r",
                  "        <td>{{response.description}}</td>\r",
                  "        <td>{{response.guid}}</td>\r",
                  "        <td>{{response.created}}</td>\r",
                  "        <td>{{response.updated}}</td>\r",
                  "        <td>{{response.user.guid}}</td>\r",
                  "        <td>{{response.user.email}}</td>\r",
                  "        <td>{{response.user.sso_id}}</td>\r",
                  "        <td>{{response.user.first_name}}</td>\r",
                  "        <td>{{response.user.last_name}}</td>\r",
                  "        <td>{{response.user.short_name}}</td>\r",
                  "        <td>{{response.schema}}</td>\r",
                  "        <td>{{response.presentation_name}}</td>\r",
                  "    </tr>\r",
                  "</table>\r",
                  "`;\r",
                  "\r",
                  "function constructVisualizerPayload() {\r",
                  "    return { response: pm.response.json() }\r",
                  "}\r",
                  "\r",
                  "pm.visualizer.set(template, constructVisualizerPayload());\r",
                  ""
                ],
                "_lastExecutionId": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8cc7a4a6-4872-42ae-85d2-140683bc9665",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "cd734bec-9bb4-4183-98af-0c40dc466357"
              }
            }
          ]
        },
        "parent": {
          "id": "946d34b3-f3ee-426f-a400-fdd1625a2ff5",
          "name": "Scenario 2: End-to-end (DL) Copy",
          "description": {
            "content": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
              "name": "Create experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "         pm.response.to.have.status(201)\r",
                      "     });\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());\r",
                      ""
                    ],
                    "_lastExecutionId": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8cc7a4a6-4872-42ae-85d2-140683bc9665",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "cd734bec-9bb4-4183-98af-0c40dc466357"
                  }
                }
              ]
            },
            {
              "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
              "name": "Create model in experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712064a3-ece0-4086-818e-d56529096656",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());"
                    ],
                    "_lastExecutionId": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
                  }
                }
              ]
            },
            {
              "id": "5d65e3c2-2080-4991-8ce7-ccec0e64086a",
              "name": "Delete model",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models",
                    "{{modelGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f174d403-3e38-4eda-8bfe-276d2ecd79bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "f268397a-c86e-4f00-add9-8a650942649d"
                  }
                }
              ]
            },
            {
              "id": "5ee05fd4-05ae-40f7-af7d-7d4049688e3c",
              "name": "Delete experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments",
                    "{{experimentGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0abced1a-d66d-4eee-82b5-c49e36114b86",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "34c6ec0c-914c-434d-b15a-93546e6228c9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 4,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "63c6e946-4108-4c20-9325-71434d2c7b80",
          "httpRequestId": "5b4d16e7-e19f-4357-ab66-6aac725718b9",
          "scriptId": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
          "execution": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 401",
          "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "0ea2ed10193c96e64c68e8a32bd2cb6a",
          "id": "533459e9-2e03-4037-b9cc-c53a22b74de6",
          "timestamp": 1719261044428,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
          "name": "Create model in experiment",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "service-ml-middleware",
                "api",
                "models"
              ],
              "host": [
                "{{GATEWAY_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "712064a3-ece0-4086-818e-d56529096656",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body contains string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
                  "\r",
                  "\r",
                  "//Vizualize response\r",
                  "var template = `\r",
                  "<style type=\"text/css\">\r",
                  "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                  "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                  "    .tftable tr {background-color:#ffffff;}\r",
                  "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                  "    .tftable tr:hover {background-color:#e0ffff;}\r",
                  "</style>\r",
                  "\r",
                  "<table class=\"tftable\" border=\"1\">\r",
                  "    <tr>\r",
                  "        <th>Description</th>\r",
                  "        <th>GUID</th>\r",
                  "        <th>Created</th>\r",
                  "        <th>Updated</th>\r",
                  "        <th>User GUID</th>\r",
                  "        <th>Email</th>\r",
                  "        <th>SSO ID</th>\r",
                  "        <th>First Name</th>\r",
                  "        <th>Last Name</th>\r",
                  "        <th>Short Name</th>\r",
                  "        <th>Schema</th>\r",
                  "        <th>Presentation Name</th>\r",
                  "    </tr>\r",
                  "    <tr>\r",
                  "        <td>{{response.description}}</td>\r",
                  "        <td>{{response.guid}}</td>\r",
                  "        <td>{{response.created}}</td>\r",
                  "        <td>{{response.updated}}</td>\r",
                  "        <td>{{response.user.guid}}</td>\r",
                  "        <td>{{response.user.email}}</td>\r",
                  "        <td>{{response.user.sso_id}}</td>\r",
                  "        <td>{{response.user.first_name}}</td>\r",
                  "        <td>{{response.user.last_name}}</td>\r",
                  "        <td>{{response.user.short_name}}</td>\r",
                  "        <td>{{response.schema}}</td>\r",
                  "        <td>{{response.presentation_name}}</td>\r",
                  "    </tr>\r",
                  "</table>\r",
                  "`;\r",
                  "\r",
                  "function constructVisualizerPayload() {\r",
                  "    return { response: pm.response.json() }\r",
                  "}\r",
                  "\r",
                  "pm.visualizer.set(template, constructVisualizerPayload());"
                ],
                "_lastExecutionId": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
              }
            }
          ]
        },
        "parent": {
          "id": "946d34b3-f3ee-426f-a400-fdd1625a2ff5",
          "name": "Scenario 2: End-to-end (DL) Copy",
          "description": {
            "content": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
              "name": "Create experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "         pm.response.to.have.status(201)\r",
                      "     });\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());\r",
                      ""
                    ],
                    "_lastExecutionId": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8cc7a4a6-4872-42ae-85d2-140683bc9665",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "cd734bec-9bb4-4183-98af-0c40dc466357"
                  }
                }
              ]
            },
            {
              "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
              "name": "Create model in experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712064a3-ece0-4086-818e-d56529096656",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());"
                    ],
                    "_lastExecutionId": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
                  }
                }
              ]
            },
            {
              "id": "5d65e3c2-2080-4991-8ce7-ccec0e64086a",
              "name": "Delete model",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models",
                    "{{modelGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f174d403-3e38-4eda-8bfe-276d2ecd79bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "f268397a-c86e-4f00-add9-8a650942649d"
                  }
                }
              ]
            },
            {
              "id": "5ee05fd4-05ae-40f7-af7d-7d4049688e3c",
              "name": "Delete experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments",
                    "{{experimentGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0abced1a-d66d-4eee-82b5-c49e36114b86",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "34c6ec0c-914c-434d-b15a-93546e6228c9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9df3f56d-2a3e-42e4-bef2-0a133870f932",
          "length": 4,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "89632eb3-3b63-45e8-99c9-9225d0b15b38",
          "scriptId": "712064a3-ece0-4086-818e-d56529096656",
          "execution": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Body contains string",
          "message": "expected '{\"timestamp\":\"2024-06-24T20:30:44.976…' to include 'guid'",
          "stack": "AssertionError: expected '{\"timestamp\":\"2024-06-24T20:30:44.976…' to include 'guid'\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "88af1d2b23eb3f48db98604cababfa9a",
          "id": "335f84e3-5943-46e7-94c1-b8d3ec5610ad",
          "timestamp": 1719261044430,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
          "name": "Create model in experiment",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "service-ml-middleware",
                "api",
                "models"
              ],
              "host": [
                "{{GATEWAY_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "712064a3-ece0-4086-818e-d56529096656",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Body contains string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
                  "\r",
                  "\r",
                  "//Vizualize response\r",
                  "var template = `\r",
                  "<style type=\"text/css\">\r",
                  "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                  "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                  "    .tftable tr {background-color:#ffffff;}\r",
                  "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                  "    .tftable tr:hover {background-color:#e0ffff;}\r",
                  "</style>\r",
                  "\r",
                  "<table class=\"tftable\" border=\"1\">\r",
                  "    <tr>\r",
                  "        <th>Description</th>\r",
                  "        <th>GUID</th>\r",
                  "        <th>Created</th>\r",
                  "        <th>Updated</th>\r",
                  "        <th>User GUID</th>\r",
                  "        <th>Email</th>\r",
                  "        <th>SSO ID</th>\r",
                  "        <th>First Name</th>\r",
                  "        <th>Last Name</th>\r",
                  "        <th>Short Name</th>\r",
                  "        <th>Schema</th>\r",
                  "        <th>Presentation Name</th>\r",
                  "    </tr>\r",
                  "    <tr>\r",
                  "        <td>{{response.description}}</td>\r",
                  "        <td>{{response.guid}}</td>\r",
                  "        <td>{{response.created}}</td>\r",
                  "        <td>{{response.updated}}</td>\r",
                  "        <td>{{response.user.guid}}</td>\r",
                  "        <td>{{response.user.email}}</td>\r",
                  "        <td>{{response.user.sso_id}}</td>\r",
                  "        <td>{{response.user.first_name}}</td>\r",
                  "        <td>{{response.user.last_name}}</td>\r",
                  "        <td>{{response.user.short_name}}</td>\r",
                  "        <td>{{response.schema}}</td>\r",
                  "        <td>{{response.presentation_name}}</td>\r",
                  "    </tr>\r",
                  "</table>\r",
                  "`;\r",
                  "\r",
                  "function constructVisualizerPayload() {\r",
                  "    return { response: pm.response.json() }\r",
                  "}\r",
                  "\r",
                  "pm.visualizer.set(template, constructVisualizerPayload());"
                ],
                "_lastExecutionId": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
              }
            }
          ]
        },
        "parent": {
          "id": "946d34b3-f3ee-426f-a400-fdd1625a2ff5",
          "name": "Scenario 2: End-to-end (DL) Copy",
          "description": {
            "content": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
              "name": "Create experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "         pm.response.to.have.status(201)\r",
                      "     });\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());\r",
                      ""
                    ],
                    "_lastExecutionId": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8cc7a4a6-4872-42ae-85d2-140683bc9665",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "cd734bec-9bb4-4183-98af-0c40dc466357"
                  }
                }
              ]
            },
            {
              "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
              "name": "Create model in experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712064a3-ece0-4086-818e-d56529096656",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());"
                    ],
                    "_lastExecutionId": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
                  }
                }
              ]
            },
            {
              "id": "5d65e3c2-2080-4991-8ce7-ccec0e64086a",
              "name": "Delete model",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models",
                    "{{modelGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f174d403-3e38-4eda-8bfe-276d2ecd79bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "f268397a-c86e-4f00-add9-8a650942649d"
                  }
                }
              ]
            },
            {
              "id": "5ee05fd4-05ae-40f7-af7d-7d4049688e3c",
              "name": "Delete experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments",
                    "{{experimentGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0abced1a-d66d-4eee-82b5-c49e36114b86",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "34c6ec0c-914c-434d-b15a-93546e6228c9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9df3f56d-2a3e-42e4-bef2-0a133870f932",
          "length": 4,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "89632eb3-3b63-45e8-99c9-9225d0b15b38",
          "scriptId": "712064a3-ece0-4086-818e-d56529096656",
          "execution": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "fd055fab3277e1b6074e35d9295842ee",
          "id": "38bdf94a-60b4-40aa-80fe-19e8c062a220",
          "timestamp": 1719261045574,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5d65e3c2-2080-4991-8ce7-ccec0e64086a",
          "name": "Delete model",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "service-ml-middleware",
                "api",
                "models",
                "{{modelGuid}}"
              ],
              "host": [
                "{{GATEWAY_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f174d403-3e38-4eda-8bfe-276d2ecd79bf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "f268397a-c86e-4f00-add9-8a650942649d"
              }
            }
          ]
        },
        "parent": {
          "id": "946d34b3-f3ee-426f-a400-fdd1625a2ff5",
          "name": "Scenario 2: End-to-end (DL) Copy",
          "description": {
            "content": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
              "name": "Create experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "         pm.response.to.have.status(201)\r",
                      "     });\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());\r",
                      ""
                    ],
                    "_lastExecutionId": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8cc7a4a6-4872-42ae-85d2-140683bc9665",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "cd734bec-9bb4-4183-98af-0c40dc466357"
                  }
                }
              ]
            },
            {
              "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
              "name": "Create model in experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712064a3-ece0-4086-818e-d56529096656",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());"
                    ],
                    "_lastExecutionId": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
                  }
                }
              ]
            },
            {
              "id": "5d65e3c2-2080-4991-8ce7-ccec0e64086a",
              "name": "Delete model",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models",
                    "{{modelGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f174d403-3e38-4eda-8bfe-276d2ecd79bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "f268397a-c86e-4f00-add9-8a650942649d"
                  }
                }
              ]
            },
            {
              "id": "5ee05fd4-05ae-40f7-af7d-7d4049688e3c",
              "name": "Delete experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments",
                    "{{experimentGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0abced1a-d66d-4eee-82b5-c49e36114b86",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "34c6ec0c-914c-434d-b15a-93546e6228c9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c69057df-423b-4c05-8d02-71af499cdf73",
          "length": 4,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "af28afaa-86e3-43d1-ab88-7eb56b95608e",
          "scriptId": "f174d403-3e38-4eda-8bfe-276d2ecd79bf",
          "execution": "f268397a-c86e-4f00-add9-8a650942649d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "665022f68538bcecd9c4d9758df5687d",
          "id": "8f581941-d4cf-4bc4-a8d7-e149bc462202",
          "timestamp": 1719261046708,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5ee05fd4-05ae-40f7-af7d-7d4049688e3c",
          "name": "Delete experiment",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "service-ml-middleware",
                "api",
                "experiments",
                "{{experimentGuid}}"
              ],
              "host": [
                "{{GATEWAY_URL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0abced1a-d66d-4eee-82b5-c49e36114b86",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "_lastExecutionId": "34c6ec0c-914c-434d-b15a-93546e6228c9"
              }
            }
          ]
        },
        "parent": {
          "id": "946d34b3-f3ee-426f-a400-fdd1625a2ff5",
          "name": "Scenario 2: End-to-end (DL) Copy",
          "description": {
            "content": "1. Create an experiment\n    \n2. Update experiment\n    \n3. Create a model in experiment\n    \n4. Create a preprocessing step\n    \n5. Create a model parameter step (with DL algorithm)\n    \n6. Create a training step\n    \n7. Create links between steps\n    \n8. Run the model\n    \n9. Change version state to test\n    \n10. Run a version in a testing state\n    \n11. Change version state to prod\n    \n12. Run a version in a production state\n    \n13. Delete a run\n    \n14. Delete a model\n    \n15. Delete an experiment",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3b9458ec-6c4f-4bc3-b0e0-d20cf8c0cbca",
              "name": "Create experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"description\": \"{{randomString}}\",\r\n    \"schema\": \"{{experimentSchema}}\",\r\n    \"presentation_name\": \"{{randomString}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "277f958c-98e8-4e6c-904e-8f75345ef6d1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "         pm.response.to.have.status(201)\r",
                      "     });\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"experimentGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());\r",
                      ""
                    ],
                    "_lastExecutionId": "b83c273e-3014-4d98-a2b8-0c310248e0f5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8cc7a4a6-4872-42ae-85d2-140683bc9665",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "cd734bec-9bb4-4183-98af-0c40dc466357"
                  }
                }
              ]
            },
            {
              "id": "6346648b-6ed8-4e10-b8c5-6466b935c44e",
              "name": "Create model in experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"description\": \"{{randomString}}\",\r\n  \"presentation_name\": \"{{randomString}}\",\r\n  \"experiment_id\": \"{{experimentGuid}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "712064a3-ece0-4086-818e-d56529096656",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Body contains string\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"guid\")\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "     pm.collectionVariables.set(\"modelGuid\", jsonData.guid);\r",
                      "\r",
                      "\r",
                      "//Vizualize response\r",
                      "var template = `\r",
                      "<style type=\"text/css\">\r",
                      "    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                      "    .tftable th {font-size:14px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                      "    .tftable tr {background-color:#ffffff;}\r",
                      "    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                      "    .tftable tr:hover {background-color:#e0ffff;}\r",
                      "</style>\r",
                      "\r",
                      "<table class=\"tftable\" border=\"1\">\r",
                      "    <tr>\r",
                      "        <th>Description</th>\r",
                      "        <th>GUID</th>\r",
                      "        <th>Created</th>\r",
                      "        <th>Updated</th>\r",
                      "        <th>User GUID</th>\r",
                      "        <th>Email</th>\r",
                      "        <th>SSO ID</th>\r",
                      "        <th>First Name</th>\r",
                      "        <th>Last Name</th>\r",
                      "        <th>Short Name</th>\r",
                      "        <th>Schema</th>\r",
                      "        <th>Presentation Name</th>\r",
                      "    </tr>\r",
                      "    <tr>\r",
                      "        <td>{{response.description}}</td>\r",
                      "        <td>{{response.guid}}</td>\r",
                      "        <td>{{response.created}}</td>\r",
                      "        <td>{{response.updated}}</td>\r",
                      "        <td>{{response.user.guid}}</td>\r",
                      "        <td>{{response.user.email}}</td>\r",
                      "        <td>{{response.user.sso_id}}</td>\r",
                      "        <td>{{response.user.first_name}}</td>\r",
                      "        <td>{{response.user.last_name}}</td>\r",
                      "        <td>{{response.user.short_name}}</td>\r",
                      "        <td>{{response.schema}}</td>\r",
                      "        <td>{{response.presentation_name}}</td>\r",
                      "    </tr>\r",
                      "</table>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    return { response: pm.response.json() }\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());"
                    ],
                    "_lastExecutionId": "e03a9f59-a1b8-4c67-9cdb-7081256170ff"
                  }
                }
              ]
            },
            {
              "id": "5d65e3c2-2080-4991-8ce7-ccec0e64086a",
              "name": "Delete model",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "models",
                    "{{modelGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f174d403-3e38-4eda-8bfe-276d2ecd79bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "f268397a-c86e-4f00-add9-8a650942649d"
                  }
                }
              ]
            },
            {
              "id": "5ee05fd4-05ae-40f7-af7d-7d4049688e3c",
              "name": "Delete experiment",
              "request": {
                "url": {
                  "protocol": "http",
                  "path": [
                    "service-ml-middleware",
                    "api",
                    "experiments",
                    "{{experimentGuid}}"
                  ],
                  "host": [
                    "{{GATEWAY_URL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0abced1a-d66d-4eee-82b5-c49e36114b86",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "_lastExecutionId": "34c6ec0c-914c-434d-b15a-93546e6228c9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f206afce-3063-49f6-9c2e-93e63d1f3d90",
          "length": 4,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a08721c8-3c43-4589-a260-5693c48d0e94",
          "scriptId": "0abced1a-d66d-4eee-82b5-c49e36114b86",
          "execution": "34c6ec0c-914c-434d-b15a-93546e6228c9"
        }
      }
    ],
    "error": null
  }
}